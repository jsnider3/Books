./api/go1.7.txt:pkg context, func TODO() Context
./doc/codewalk/codewalk.js:  // TODO(rsc): handle case where there are no comments
./doc/effective_go.html:TODO
./doc/go1.1.html:the parser now keeps better track of stylized annotations such as <code>TODO(joe)</code>
./doc/go_faq.html:<!-- TODO(adg): find out how this works on Windows -->
./doc/go_faq.html:var _ = unused.Item  // TODO: Delete before committing!
./doc/progs/eff_unused1.go:	// TODO: use fd.
./doc/progs/eff_unused2.go:	// TODO: use fd.
./doc/progs/interface2.go:	// TODO(proppy): test output OMIT
./misc/arm/a:# TODO(kaib): add gdb bridge support
./misc/cgo/errors/errors_test.go:	cmd := exec.Command("go", "build", "-gcflags=-L", "-o="+dst, path(file)) // TODO(gri) no need for -gcflags=-L if go tool is adjusted
./misc/cgo/gmp/gmp.go:	// TODO(rsc): more work on 32-bit platforms
./misc/cgo/testcarchive/carchive_test.go:		// TODO(crawshaw): can we do better?
./misc/cgo/testcshared/cshared_test.go:		// TODO(crawshaw): can we do better?
./misc/cgo/testcshared/main3.c:  // TODO(hyangah): check that main.main can run.
./misc/cgo/testsanitizers/cc_test.go:	// TODO(bcmills): This code also appears in
./misc/chrome/gophertool/gopher.js:        // TODO: make this smarter, using a list of packages + substring matches.
./misc/wasm/wasm_exec.js:let values = []; // TODO: garbage collection
./src/archive/tar/common.go:	// TODO(dsnet): Re-enable this when adding sparse support.
./src/archive/tar/reader.go:// TODO(dsnet): Re-export this when adding sparse file support.
./src/archive/tar/stat_unix.go:			// TODO: Implement solaris (see https://golang.org/issue/8106)
./src/archive/tar/writer.go:	// TODO(dsnet): Re-enable this when adding sparse support.
./src/archive/tar/writer.go:	// TODO(dsnet): Re-enable this when adding sparse support.
./src/archive/tar/writer.go:	// TODO(dsnet): Re-enable this when adding sparse support.
./src/archive/tar/writer.go:// TODO(dsnet): Re-export this when adding sparse file support.
./src/archive/tar/writer_test.go:		// TODO(dsnet): Re-enable this test when adding sparse support.
./src/archive/zip/reader_test.go:		// TODO(bradfitz): add a new test that only corrupts
./src/archive/zip/writer_test.go:// TODO(adg): a more sophisticated test suite
./src/bytes/bytes.go:// TODO: update when package unicode captures more of the properties.
./src/bytes/bytes.go:			// TODO: if large prefixes of sep are matching
./src/cmd/api/goapi.go:	// TODO: ReleaseTags (need to load default)
./src/cmd/api/goapi.go:			// TODO(gri) change to "ideal-rune"
./src/cmd/api/goapi_test.go:		// TODO(gri) remove extra pkg directory eventually
./src/cmd/asm/internal/asm/asm.go:// TODO: configure the architecture
./src/cmd/asm/internal/asm/asm.go:			p.errorf("TODO: implement three-operand instructions for this architecture")
./src/cmd/asm/internal/asm/operand_test.go:	{"*AX", "AX"}, // TODO: Should make * illegal here; a simple alias for JMP AX.
./src/cmd/asm/internal/asm/parse.go:// TODO: Split apart?
./src/cmd/asm/internal/asm/parse.go:	// R(1)<<...   Ugly check. TODO: Rethink how we handle ARM register shifts to be
./src/cmd/asm/internal/asm/parse.go:		// TODO: Consistency in the encoding would be nice here.
./src/cmd/asm/internal/asm/testdata/386.s://	CALL	(AX*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/386.s://	CALL	*(AX*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/386.s://	CALL	(AX*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/amd64.s://	JMP	*(R12*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/amd64.s://	JMP	*(AX*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/amd64.s://	JMP	(R12*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/amd64.s://	JMP	(AX*4) // TODO: This line is silently dropped on the floor!
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL (BX), BND2                // f30f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL (R11), BND2               // f3410f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL DX, BND2                  // f30f1ad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL R11, BND2                 // f3410f1ad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL (BX), BND3                // f30f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL (R11), BND3               // f3410f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL DX, BND3                  // f30f1ada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCL R11, BND3                 // f3410f1adb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN (BX), BND2                // f20f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN (R11), BND2               // f2410f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN DX, BND2                  // f20f1bd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN R11, BND2                 // f2410f1bd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN (BX), BND3                // f20f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN (R11), BND3               // f2410f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN DX, BND3                  // f20f1bda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCN R11, BND3                 // f2410f1bdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU (BX), BND2                // f20f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU (R11), BND2               // f2410f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU DX, BND2                  // f20f1ad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU R11, BND2                 // f2410f1ad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU (BX), BND3                // f20f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU (R11), BND3               // f2410f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU DX, BND3                  // f20f1ada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDCU R11, BND3                 // f2410f1adb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDLDX (BX), BND2               // 0f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDLDX (R11), BND2              // 410f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDLDX (BX), BND3               // 0f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDLDX (R11), BND3              // 410f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMK (BX), BND2                // f30f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMK (R11), BND2               // f3410f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMK (BX), BND3                // f30f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMK (R11), BND3               // f3410f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV (BX), BND2               // 660f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV (R11), BND2              // 66410f1a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND2, BND2               // 660f1ad2 or 660f1bd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND3, BND2               // 660f1ad3 or 660f1bda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV (BX), BND3               // 660f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV (R11), BND3              // 66410f1a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND2, BND3               // 660f1ada or 660f1bd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND3, BND3               // 660f1adb or 660f1bdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND2, (BX)               // 660f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND3, (BX)               // 660f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND2, (R11)              // 66410f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDMOV BND3, (R11)              // 66410f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDSTX BND2, (BX)               // 0f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDSTX BND3, (BX)               // 0f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDSTX BND2, (R11)              // 410f1b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: BNDSTX BND3, (R11)              // 410f1b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CALLQ* (BX)                     // ff13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CALLQ* (R11)                    // 41ff13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CALLQ* DX                       // ffd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CALLQ* R11                      // 41ffd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CALL .+$0x11223344              // e844332211 or 48e844332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LCALLW* (BX)                    // 66ff1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LCALLW* (R11)                   // 6641ff1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LCALLL* (BX)                    // ff1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LCALLL* (R11)                   // 41ff1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LCALLQ* (BX)                    // 48ff1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LCALLQ* (R11)                   // 49ff1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI (BX), M2               // 660f2d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI (R11), M2              // 66410f2d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI X2, M2                 // 660f2dd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI X11, M2                // 66410f2dd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI (BX), M3               // 660f2d1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI (R11), M3              // 66410f2d1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI X2, M3                 // 660f2dda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPD2PI X11, M3                // 66410f2ddb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD (BX), X2               // 660f2a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD (R11), X2              // 66410f2a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD M2, X2                 // 660f2ad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD M3, X2                 // 660f2ad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD (BX), X11              // 66440f2a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD (R11), X11             // 66450f2a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD M2, X11                // 66440f2ada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PD M3, X11                // 66440f2adb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS (BX), X2               // 0f2a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS (R11), X2              // 410f2a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS M2, X2                 // 0f2ad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS M3, X2                 // 0f2ad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS (BX), X11              // 440f2a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS (R11), X11             // 450f2a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS M2, X11                // 440f2ada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPI2PS M3, X11                // 440f2adb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI (BX), M2               // 0f2d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI (R11), M2              // 410f2d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI X2, M2                 // 0f2dd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI X11, M2                // 410f2dd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI (BX), M3               // 0f2d1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI (R11), M3              // 410f2d1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI X2, M3                 // 0f2dda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTPS2PI X11, M3                // 410f2ddb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI (BX), M2              // 660f2c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI (R11), M2             // 66410f2c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI X2, M2                // 660f2cd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI X11, M2               // 66410f2cd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI (BX), M3              // 660f2c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI (R11), M3             // 66410f2c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI X2, M3                // 660f2cda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPD2PI X11, M3               // 66410f2cdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI (BX), M2              // 0f2c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI (R11), M2             // 410f2c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI X2, M2                // 0f2cd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI X11, M2               // 410f2cd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI (BX), M3              // 0f2c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI (R11), M3             // 410f2c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI X2, M3                // 0f2cda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: CVTTPS2PI X11, M3               // 410f2cdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: ENTERQ $0x12, $0xf123           // c823f112
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMP F2                        // d8da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMP F3                        // d8db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMFP (BX)                     // d81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMFP (R11)                    // 41d81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMPL (BX)                     // dc1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMPL (R11)                    // 41dc1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FCOMPP                          // ded9
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVRP F0, F2                   // defa
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVRP F0, F3                   // defb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVR F2, F0                    // d8fa
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVR F3, F0                    // d8fb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVFR (BX)                     // d83b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVFR (R11)                    // 41d83b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVRL (BX)                     // dc3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVRL (R11)                    // 41dc3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVP F0, F2                    // def2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FDIVP F0, F3                    // def3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FFREE F2                        // ddc2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FFREE F3                        // ddc3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FFREEP F2                       // dfc2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FFREEP F3                       // dfc3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIADD (BX)                      // de03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIADD (R11)                     // 41de03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIADDL (BX)                     // da03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIADDL (R11)                    // 41da03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOM (BX)                      // de13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOM (R11)                     // 41de13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOML (BX)                     // da13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOML (R11)                    // 41da13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOMP (BX)                     // de1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOMP (R11)                    // 41de1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOMPL (BX)                    // da1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FICOMPL (R11)                   // 41da1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIV (BX)                      // de33
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIV (R11)                     // 41de33
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIVL (BX)                     // da33
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIVL (R11)                    // 41da33
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIVR (BX)                     // de3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIVR (R11)                    // 41de3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIVRL (BX)                    // da3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIDIVRL (R11)                   // 41da3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FILD (BX)                       // df03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FILD (R11)                      // 41df03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FILDL (BX)                      // db03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FILDL (R11)                     // 41db03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FILDLL (BX)                     // df2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FILDLL (R11)                    // 41df2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIMUL (BX)                      // de0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIMUL (R11)                     // 41de0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIMULL (BX)                     // da0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIMULL (R11)                    // 41da0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIST (BX)                       // df13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FIST (R11)                      // 41df13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTL (BX)                      // db13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTL (R11)                     // 41db13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTP (BX)                      // df1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTP (R11)                     // 41df1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTPL (BX)                     // db1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTPL (R11)                    // 41db1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTPLL (BX)                    // df3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTPLL (R11)                   // 41df3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTTP (BX)                     // df0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTTP (R11)                    // 41df0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTTPL (BX)                    // db0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTTPL (R11)                   // 41db0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTTPLL (BX)                   // dd0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISTTPLL (R11)                  // 41dd0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUB (BX)                      // de23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUB (R11)                     // 41de23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUBL (BX)                     // da23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUBL (R11)                    // 41da23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUBR (BX)                     // de2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUBR (R11)                    // 41de2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUBRL (BX)                    // da2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FISUBRL (R11)                   // 41da2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLD F2                          // d9c2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLD F3                          // d9c3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDS (BX)                       // d903
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDS (R11)                      // 41d903
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDL (BX)                       // dd03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDL (R11)                      // 41dd03
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDT (BX)                       // db2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDT (R11)                      // 41db2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDENVL (BX)                    // d923
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FLDENVL (R11)                   // 41d923
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMUL F2, F0                     // d8ca
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMUL F3, F0                     // d8cb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMUL F0, F2                     // dcca
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMUL F0, F3                     // dccb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMULS (BX)                      // d80b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMULS (R11)                     // 41d80b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMULL (BX)                      // dc0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMULL (R11)                     // 41dc0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMULP F0, F2                    // deca
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FMULP F0, F3                    // decb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNCLEX                          // dbe2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNINIT                          // dbe3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSAVEL (BX)                    // dd33
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSAVEL (R11)                   // 41dd33
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTCW (BX)                     // d93b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTCW (R11)                    // 41d93b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTENVL (BX)                   // d933
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTENVL (R11)                  // 41d933
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTSW AX                       // dfe0
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTSW (BX)                     // dd3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FNSTSW (R11)                    // 41dd3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FRSTORL (BX)                    // dd23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FRSTORL (R11)                   // 41dd23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FST F2                          // ddd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FST F3                          // ddd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTS (BX)                       // d913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTS (R11)                      // 41d913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTL (BX)                       // dd13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTL (R11)                      // 41dd13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTP F2                         // ddda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTP F3                         // dddb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTPS (BX)                      // d91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTPS (R11)                     // 41d91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTPL (BX)                      // dd1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTPL (R11)                     // 41dd1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTPT (BX)                      // db3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSTPT (R11)                     // 41db3b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUB F2, F0                     // d8e2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUB F3, F0                     // d8e3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBR F0, F2                    // dcea
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBR F0, F3                    // dceb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBS (BX)                      // d823
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBS (R11)                     // 41d823
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBL (BX)                      // dc23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBL (R11)                     // 41dc23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBRP F0, F2                   // deea
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBRP F0, F3                   // deeb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBR F2, F0                    // d8ea
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBR F3, F0                    // d8eb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUB F0, F2                     // dce2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUB F0, F3                     // dce3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBRS (BX)                     // d82b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBRS (R11)                    // 41d82b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBRL (BX)                     // dc2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBRL (R11)                    // 41dc2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBP F0, F2                    // dee2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FSUBP F0, F3                    // dee3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOM F2                        // dde2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOM F3                        // dde3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMI F2, F0                   // dbea
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMI F3, F0                   // dbeb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMIP F2, F0                  // dfea
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMIP F3, F0                  // dfeb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMP F2                       // ddea
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMP F3                       // ddeb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FUCOMPP                         // dae9
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FWAIT                           // 9b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FXCH F2                         // d9ca
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: FXCH F3                         // d9cb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INB DX, AL                      // ec
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INB $7, AL                      // e407
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INW DX, AX                      // 66ed
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INW $7, AX                      // 66e507
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INL DX, AX                      // ed
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INL $7, AX                      // e507
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: INT $3                          // cc
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JA .+$0x11223344                // 480f8744332211 or 0f8744332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JA .+$0x11                      // 7711
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JAE .+$0x11223344               // 0f8344332211 or 480f8344332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JAE .+$0x11                     // 7311
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JB .+$0x11223344                // 480f8244332211 or 0f8244332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JB .+$0x11                      // 7211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JBE .+$0x11223344               // 0f8644332211 or 480f8644332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JBE .+$0x11                     // 7611
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JE .+$0x11223344                // 480f8444332211 or 0f8444332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JE .+$0x11                      // 7411
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JECXZ .+$0x11                   // e311
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JG .+$0x11223344                // 0f8f44332211 or 480f8f44332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JG .+$0x11                      // 7f11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JGE .+$0x11223344               // 480f8d44332211 or 0f8d44332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JGE .+$0x11                     // 7d11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JL .+$0x11223344                // 0f8c44332211 or 480f8c44332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JL .+$0x11                      // 7c11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JLE .+$0x11223344               // 0f8e44332211 or 480f8e44332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JLE .+$0x11                     // 7e11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JMPQ* (BX)                      // ff23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JMPQ* (R11)                     // 41ff23
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JMPQ* DX                        // ffe2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JMPQ* R11                       // 41ffe3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JMP .+$0x11223344               // 48e944332211 or e944332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JMP .+$0x11                     // eb11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LJMPW* (BX)                     // 66ff2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LJMPW* (R11)                    // 6641ff2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LJMPL* (BX)                     // ff2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LJMPL* (R11)                    // 41ff2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LJMPQ* (BX)                     // 48ff2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LJMPQ* (R11)                    // 49ff2b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNE .+$0x11223344               // 480f8544332211 or 0f8544332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNE .+$0x11                     // 7511
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNO .+$0x11223344               // 480f8144332211 or 0f8144332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNO .+$0x11                     // 7111
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNP .+$0x11223344               // 480f8b44332211 or 0f8b44332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNP .+$0x11                     // 7b11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNS .+$0x11223344               // 0f8944332211 or 480f8944332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JNS .+$0x11                     // 7911
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JO .+$0x11223344                // 0f8044332211 or 480f8044332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JO .+$0x11                      // 7011
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JP .+$0x11223344                // 480f8a44332211 or 0f8a44332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JP .+$0x11                      // 7a11
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JRCXZ .+$0x11                   // e311
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JS .+$0x11223344                // 480f8844332211 or 0f8844332211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: JS .+$0x11                      // 7811
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LOOP .+$0x11                    // e211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LOOPEQ .+$0x11                  // e111
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: LOOPNE .+$0x11                  // e011
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVABSB 0x123456789abcdef1, AL  // a0f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW 0x123456789abcdef1, AX     // 66a1f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL 0x123456789abcdef1, AX     // a1f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVQ 0x123456789abcdef1, AX     // 48a1f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW (BX), SS                   // 668e13 or 488e13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW (R11), SS                  // 66418e13 or 498e13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW DX, SS                     // 668ed2 or 488ed2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW R11, SS                    // 66418ed3 or 498ed3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW (BX), DS                   // 668e1b or 488e1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW (R11), DS                  // 66418e1b or 498e1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW DX, DS                     // 668eda or 488eda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW R11, DS                    // 66418edb or 498edb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL (BX), SS                   // 8e13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL (R11), SS                  // 418e13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL DX, SS                     // 8ed2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL R11, SS                    // 418ed3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL (BX), DS                   // 8e1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL (R11), DS                  // 418e1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL DX, DS                     // 8eda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL R11, DS                    // 418edb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW AX, 0x123456789abcdef1     // 66a3f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL AX, 0x123456789abcdef1     // a3f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVQ AX, 0x123456789abcdef1     // 48a3f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVABSB AL, 0x123456789abcdef1  // a2f1debc9a78563412
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW SS, (BX)                   // 668c13 or 488c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW DS, (BX)                   // 668c1b or 488c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW SS, (R11)                  // 66418c13 or 498c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW DS, (R11)                  // 66418c1b or 498c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW SS, DX                     // 668cd2 or 488cd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW DS, DX                     // 668cda or 488cda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW SS, R11                    // 66418cd3 or 498cd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVW DS, R11                    // 66418cdb or 498cdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL SS, (BX)                   // 8c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL DS, (BX)                   // 8c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL SS, (R11)                  // 418c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL DS, (R11)                  // 418c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL SS, DX                     // 8cd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL DS, DX                     // 8cda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL SS, R11                    // 418cd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVL DS, R11                    // 418cdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSD X2, (BX)                // f20f2b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSD X11, (BX)               // f2440f2b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSD X2, (R11)               // f2410f2b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSD X11, (R11)              // f2450f2b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSS X2, (BX)                // f30f2b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSS X11, (BX)               // f3440f2b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSS X2, (R11)               // f3410f2b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVNTSS X11, (R11)              // f3450f2b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVQ M2, M2                     // 0f6fd2 or 0f7fd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVQ M3, M2                     // 0f6fd3 or 0f7fda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVQ M2, M3                     // 0f6fda or 0f7fd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: MOVQ M3, M3                     // 0f6fdb or 0f7fdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: OUTB AL, DX                     // ee
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: OUTW AX, DX                     // 66ef
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: OUTL AX, DX                     // ef
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: OUTB AL, $7                     // e607
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: OUTW AX, $7                     // 66e707
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: OUTL AX, $7                     // e707
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB (BX), M2                  // 0f381c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB (R11), M2                 // 410f381c13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB M2, M2                    // 0f381cd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB M3, M2                    // 0f381cd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB (BX), M3                  // 0f381c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB (R11), M3                 // 410f381c1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB M2, M3                    // 0f381cda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSB M3, M3                    // 0f381cdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD (BX), M2                  // 0f381e13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD (R11), M2                 // 410f381e13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD M2, M2                    // 0f381ed2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD M3, M2                    // 0f381ed3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD (BX), M3                  // 0f381e1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD (R11), M3                 // 410f381e1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD M2, M3                    // 0f381eda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSD M3, M3                    // 0f381edb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW (BX), M2                  // 0f381d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW (R11), M2                 // 410f381d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW M2, M2                    // 0f381dd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW M3, M2                    // 0f381dd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW (BX), M3                  // 0f381d1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW (R11), M3                 // 410f381d1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW M2, M3                    // 0f381dda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PABSW M3, M3                    // 0f381ddb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ (BX), M2                  // 0fd413
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ (R11), M2                 // 410fd413
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ M2, M2                    // 0fd4d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ M3, M2                    // 0fd4d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ (BX), M3                  // 0fd41b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ (R11), M3                 // 410fd41b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ M2, M3                    // 0fd4da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PADDQ M3, M3                    // 0fd4db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, (BX), M2            // 0f3a0f1307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, (R11), M2           // 410f3a0f1307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, M2, M2              // 0f3a0fd207
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, M3, M2              // 0f3a0fd307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, (BX), M3            // 0f3a0f1b07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, (R11), M3           // 410f3a0f1b07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, M2, M3              // 0f3a0fda07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PALIGNR $7, M3, M3              // 0f3a0fdb07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PEXTRW $7, M2, DX               // 0fc5d207
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PEXTRW $7, M3, DX               // 0fc5d307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PEXTRW $7, M2, R11              // 440fc5da07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PEXTRW $7, M3, R11              // 440fc5db07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW (BX), M2                // 0f380313
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW (R11), M2               // 410f380313
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW M2, M2                  // 0f3803d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW M3, M2                  // 0f3803d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW (BX), M3                // 0f38031b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW (R11), M3               // 410f38031b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW M2, M3                  // 0f3803da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDSW M3, M3                  // 0f3803db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW (BX), M2                 // 0f380113
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW (R11), M2                // 410f380113
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW M2, M2                   // 0f3801d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW M3, M2                   // 0f3801d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW (BX), M3                 // 0f38011b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW (R11), M3                // 410f38011b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW M2, M3                   // 0f3801da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHADDW M3, M3                   // 0f3801db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD (BX), M2                 // 0f380613
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD (R11), M2                // 410f380613
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD M2, M2                   // 0f3806d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD M3, M2                   // 0f3806d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD (BX), M3                 // 0f38061b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD (R11), M3                // 410f38061b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD M2, M3                   // 0f3806da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBD M3, M3                   // 0f3806db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW (BX), M2                // 0f380713
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW (R11), M2               // 410f380713
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW M2, M2                  // 0f3807d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW M3, M2                  // 0f3807d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW (BX), M3                // 0f38071b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW (R11), M3               // 410f38071b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW M2, M3                  // 0f3807da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBSW M3, M3                  // 0f3807db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW (BX), M2                 // 0f380513
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW (R11), M2                // 410f380513
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW M2, M2                   // 0f3805d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW M3, M2                   // 0f3805d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW (BX), M3                 // 0f38051b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW (R11), M3                // 410f38051b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW M2, M3                   // 0f3805da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PHSUBW M3, M3                   // 0f3805db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, (BX), M2             // 0fc41307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, (R11), M2            // 410fc41307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, DX, M2               // 0fc4d207
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, R11, M2              // 410fc4d307
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, (BX), M3             // 0fc41b07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, (R11), M3            // 410fc41b07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, DX, M3               // 0fc4da07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PINSRW $7, R11, M3              // 410fc4db07
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW (BX), M2              // 0f380413
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW (R11), M2             // 410f380413
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW M2, M2                // 0f3804d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW M3, M2                // 0f3804d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW (BX), M3              // 0f38041b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW (R11), M3             // 410f38041b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW M2, M3                // 0f3804da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMADDUBSW M3, M3                // 0f3804db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW (BX), M2                 // 0fee13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW (R11), M2                // 410fee13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW M2, M2                   // 0feed2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW M3, M2                   // 0feed3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW (BX), M3                 // 0fee1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW (R11), M3                // 410fee1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW M2, M3                   // 0feeda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXSW M3, M3                   // 0feedb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB (BX), M2                 // 0fde13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB (R11), M2                // 410fde13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB M2, M2                   // 0fded2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB M3, M2                   // 0fded3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB (BX), M3                 // 0fde1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB (R11), M3                // 410fde1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB M2, M3                   // 0fdeda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMAXUB M3, M3                   // 0fdedb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW (BX), M2                 // 0fea13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW (R11), M2                // 410fea13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW M2, M2                   // 0fead2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW M3, M2                   // 0fead3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW (BX), M3                 // 0fea1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW (R11), M3                // 410fea1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW M2, M3                   // 0feada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINSW M3, M3                   // 0feadb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB (BX), M2                 // 0fda13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB (R11), M2                // 410fda13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB M2, M2                   // 0fdad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB M3, M2                   // 0fdad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB (BX), M3                 // 0fda1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB (R11), M3                // 410fda1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB M2, M3                   // 0fdada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMINUB M3, M3                   // 0fdadb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW (BX), M2               // 0f380b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW (R11), M2              // 410f380b13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW M2, M2                 // 0f380bd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW M3, M2                 // 0f380bd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW (BX), M3               // 0f380b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW (R11), M3              // 410f380b1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW M2, M3                 // 0f380bda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PMULHRSW M3, M3                 // 0f380bdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PREFETCHW (BX)                  // 0f0d0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PREFETCHW (R11)                 // 410f0d0b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PREFETCHWT1 (BX)                // 0f0d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PREFETCHWT1 (R11)               // 410f0d13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW (BX), M2                 // 0ff613
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW (R11), M2                // 410ff613
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW M2, M2                   // 0ff6d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW M3, M2                   // 0ff6d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW (BX), M3                 // 0ff61b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW (R11), M3                // 410ff61b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW M2, M3                   // 0ff6da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSADBW M3, M3                   // 0ff6db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB (BX), M2                 // 0f380013
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB (R11), M2                // 410f380013
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB M2, M2                   // 0f3800d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB M3, M2                   // 0f3800d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB (BX), M3                 // 0f38001b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB (R11), M3                // 410f38001b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB M2, M3                   // 0f3800da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSHUFB M3, M3                   // 0f3800db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB (BX), M2                 // 0f380813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB (R11), M2                // 410f380813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB M2, M2                   // 0f3808d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB M3, M2                   // 0f3808d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB (BX), M3                 // 0f38081b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB (R11), M3                // 410f38081b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB M2, M3                   // 0f3808da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNB M3, M3                   // 0f3808db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND (BX), M2                 // 0f380a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND (R11), M2                // 410f380a13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND M2, M2                   // 0f380ad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND M3, M2                   // 0f380ad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND (BX), M3                 // 0f380a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND (R11), M3                // 410f380a1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND M2, M3                   // 0f380ada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGND M3, M3                   // 0f380adb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW (BX), M2                 // 0f380913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW (R11), M2                // 410f380913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW M2, M2                   // 0f3809d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW M3, M2                   // 0f3809d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW (BX), M3                 // 0f38091b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW (R11), M3                // 410f38091b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW M2, M3                   // 0f3809da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSIGNW M3, M3                   // 0f3809db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB (BX), M2                  // 0ff813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB (R11), M2                 // 410ff813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB M2, M2                    // 0ff8d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB M3, M2                    // 0ff8d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB (BX), M3                  // 0ff81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB (R11), M3                 // 410ff81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB M2, M3                    // 0ff8da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBB M3, M3                    // 0ff8db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL (BX), M2                  // 0ffa13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL (R11), M2                 // 410ffa13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL M2, M2                    // 0ffad2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL M3, M2                    // 0ffad3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL (BX), M3                  // 0ffa1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL (R11), M3                 // 410ffa1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL M2, M3                    // 0ffada
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBL M3, M3                    // 0ffadb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ (BX), M2                  // 0ffb13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ (R11), M2                 // 410ffb13
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ M2, M2                    // 0ffbd2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ M3, M2                    // 0ffbd3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ (BX), M3                  // 0ffb1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ (R11), M3                 // 410ffb1b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ M2, M3                    // 0ffbda
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBQ M3, M3                    // 0ffbdb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB (BX), M2                 // 0fe813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB (R11), M2                // 410fe813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB M2, M2                   // 0fe8d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB M3, M2                   // 0fe8d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB (BX), M3                 // 0fe81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB (R11), M3                // 410fe81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB M2, M3                   // 0fe8da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSB M3, M3                   // 0fe8db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW (BX), M2                 // 0fe913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW (R11), M2                // 410fe913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW M2, M2                   // 0fe9d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW M3, M2                   // 0fe9d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW (BX), M3                 // 0fe91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW (R11), M3                // 410fe91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW M2, M3                   // 0fe9da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBSW M3, M3                   // 0fe9db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB (BX), M2                // 0fd813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB (R11), M2               // 410fd813
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB M2, M2                  // 0fd8d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB M3, M2                  // 0fd8d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB (BX), M3                // 0fd81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB (R11), M3               // 410fd81b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB M2, M3                  // 0fd8da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSB M3, M3                  // 0fd8db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW (BX), M2                // 0fd913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW (R11), M2               // 410fd913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW M2, M2                  // 0fd9d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW M3, M2                  // 0fd9d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW (BX), M3                // 0fd91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW (R11), M3               // 410fd91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW M2, M3                  // 0fd9da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBUSW M3, M3                  // 0fd9db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW (BX), M2                  // 0ff913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW (R11), M2                 // 410ff913
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW M2, M2                    // 0ff9d2
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW M3, M2                    // 0ff9d3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW (BX), M3                  // 0ff91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW (R11), M3                 // 410ff91b
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW M2, M3                    // 0ff9da
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: PSUBW M3, M3                    // 0ff9db
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: RETQ                            // c3
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: RETQ $0xf123                    // c223f1
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: RETFQ                           // cb
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: RETFQ $0xf123                   // ca23f1
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: XBEGIN .+$0x1122                // 66c7f82211
./src/cmd/asm/internal/asm/testdata/amd64enc.s:	//TODO: XBEGIN .+$0x11223344            // c7f844332211
./src/cmd/asm/internal/asm/testdata/arm.s://	SWI	foo(SB) - TODO: classifying foo(SB) as C_TLS_LE
./src/cmd/asm/internal/asm/testdata/arm64enc.s:// TODO means they cannot be handled now.
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO ADDW R5.UXTH, R8, R9                // 0921250b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO ADD R8.SXTB<<7, R23, R14            // ee9e288b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO ADDSW R12.SXTX<<1, R29, R7          // a7e72c2b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO ADDS R24.UXTX<<4, R25, R21          // 357338ab
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO TST $2863311530, R24                // 1ff32972
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO CMNW R21.UXTB<<4, R15               // ff11352b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO CMN R0.UXTW<<4, R16                 // 1f5220ab
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO CMPW R6.UXTB, R23                   // ff02266b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO CMP R25.SXTH<<5, R26                // 5fb739eb
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO DC
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDAXPW (R10), (R20, R16)            // 54c17f88
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDAXP (R25), (R30, R11)             // 3eaf7fc8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDNP 0xcc(RSP), ZR, R12             // ecff5928
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDNP 0x40(R28), R9, R5              // 852744a8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDPSW -0xd0(R2), R0, R12            // 4c00e668
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDPSW 0x5c(R4), R8, R5              // 85a0cb69
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDPSW 0x6c(R12), R2, R27            // 9b894d69
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVBU R14<<1(R18), R23              // 577a6e38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVBW.P 77(R18), R11                // 4bd6c438
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVBW.W -57(R18), R13               // 4d7edc38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVBW 430(R8), R22                  // 16b9c639
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVBW R2<<1(R21), R15               // af7ae238
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVBW R26(R0), R21                  // 1568fa38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVB R5(R15), R16                   // f069a538
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVHW.P 218(R22), R25               // d9a6cd78
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVHW.W 136(R2), R27                // 5b8cc878
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVHW 5708(R25), R21                // 359bec79
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTR -0x1e(R3), R4                  // 64285eb8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTR -0xe5(R3), R10                 // 6ab851f8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRB 0xf0(R13), R10                // aa094f38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRH 0xe8(R13), R23                // b7894e78
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRSB -0x24(R20), R5               // 85cadd38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRSB -0x75(R9), R13               // 2db99838
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRSH 0xef(R3), LR                 // 7ef8ce78
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRSH 0x96(R19), R24               // 786a8978
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDTRSW 0x1e(LR), R5                 // c5eb81b8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDUR 0xbf(R13), R1                  // a1f14bb8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDUR -0x3c(R22), R3                 // c3425cf8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURB -0xff(R17), R14               // 2e125038
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURH 0x80(R1), R6                  // 26004878
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURSB 0xde(LR), R3                 // c3e3cd38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURSB 0x96(R9), R7                 // 27618938
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURSH -0x49(R11), R28              // 7c71db78
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURSH -0x1f(R0), R29               // 1d109e78
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDURSW 0x48(R6), R20                // d48084b8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDXPW (R24), (R23, R11)             // 172f7f88
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO LDXP (R0), (R16, R13)               // 10347fc8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO NOP                                 // 1f2003d5
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO PRFM 0x6400(R7), PSTL2STRM          // f300b2f9
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO PRFM -215799(PC), PLIL2KEEP         // 2aa196d8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO PRFUM 0x42(R14), #0X06              // c62184f8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STLRB R11, (R22)                    // cbfe9f08
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STLRH R16, (R23)                    // f0fe9f48
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STLXP (R6, R3), (R10), R2           // 468d22c8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STLXPW (R6, R11), (R22), R21        // c6ae3588
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STNPW 44(R1), R3, R10               // 2a8c0528
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STNP 0x108(R3), ZR, R7              // 67fc10a8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVB R18, R0(R4)                    // 92682038
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVB R1, R6(R4)                     // 81682638
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO MOVH R3, R13<<1(R11)                // 63792d78
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STTR 55(R4), R29                    // 9d7803b8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STTR 124(R5), R25                   // b9c807f8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STTRB -28(R23), R16                 // f04a1e38
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STTRH 9(R10), R18                   // 52990078
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STXP (R1, R2), (R3), R10            // 61082ac8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STXP (R1, R2), (RSP), R10           // e10b2ac8
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STXPW (R1, R2), (R3), R10           // 61082a88
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO STXPW (R1, R2), (RSP), R10          // e10b2a88
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO SUBW R20.UXTW<<7, R23, R18          // f25e344b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO SUB R5.SXTW<<2, R1, R26             // 3ac825cb
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO SUBSW R2.SXTH<<3, R13, R6           // a6ad226b
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO SUBS R21.UXTX<<5, R27, R4           // 647735eb
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO TLBI
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO TST $0x80000007, R9                 // 3f0d0172
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO TST $0xfffffff0, LR                 // df6f7cf2
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO TSTW R10@>21, R2                    // 1f2f11ea
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO TST R17<<11, R24                    // 1f2f11ea
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FADD V21.D2, V10.D2, V21.D2         // 55d5754e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTASW F21, R15                    // af02241e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTAS F20, ZR                      // 9f02249e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTASW F6, R11                     // cb00641e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTAS F6, R1                       // c100649e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTAUW F19, R26                    // 7a02251e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTAU F6, R5                       // c500259e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTAUW F6, R23                     // d700651e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTAU F27, R5                      // 6503659e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMSW F15, R6                     // e601301e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMS F15, ZR                      // ff01309e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMSW F1, R14                     // 2e00701e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMS F21, R9                      // a902709e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMUW F20, R28                    // 9c02311e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMU F23, R14                     // ee02319e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMUW F18, R28                    // 5c02711e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTMU F24, R6                      // 0603719e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNSW F12, R13                    // 8d01201e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNS F9, R26                      // 3a01209e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNSW F14, R8                     // c801601e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNS F28, R10                     // 8a03609e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNUW F22, R30                    // de02211e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNU F20, R4                      // 8402219e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNUW F18, R27                    // 5b02611e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTNU F21, R0                      // a002619e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPSW F20, R6                     // 8602281e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPS F12, R20                     // 9401289e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPSW F22, R6                     // c602681e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPS F21, R28                     // bc02689e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPUW F24, R26                    // 1a03291e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPU F16, R13                     // 0d02299e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPUW F21, R29                    // bd02691e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTPU F11, R7                      // 6701699e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTZS $63, R18, R28                // 5c06189e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTZS $41, R11, R17                // 715d589e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTZU $1, ZR, R5                   // e5ff199e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTZUW $5, ZR, R20                 // f4ef591e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FCVTZU $31, R3, R7                  // 6784599e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FMADD R2, R15, R8, R1               // 01090f1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FMADD R21, R15, R25, R9             // 29574f1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FMOV R7, V25.D[1]                   // f900af9e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FMOV $3.125, V8.2D                  // 28f5006f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FMSUB R21, R13, R13, R19            // b3d50d1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FMSUB R7, R11, R15, ZR              // ff9d4b1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FNMADD R22, R17, R6, R20            // d458311f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FNMADD R0, R15, R26, R20            // 54036f1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FNMSUB R16, R14, R27, R14           // 6ec32e1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO FNMSUB R25, R29, R8, R10            // 0ae57d1f
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO SCVTFSS F30, F20                    // d4db215e
./src/cmd/asm/internal/asm/testdata/arm64enc.s:   //TODO SCVTF V7.2S, V17.2S                 // f1d8210e
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO	9a doesn't work MTFSB0	$4, 4
./src/cmd/asm/internal/asm/testdata/ppc64.s:// TODO 9a doesn't work	MOVFL	R1,$4,CR
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO 9a trouble	ADD	R1, $2, R3 maybe swap rreg and imm
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO this instruction is undefined in lex.go	LMA R1, R2, R3 NOT SUPPORTED (called MAC)
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO 9a trouble	CREQV	1, 2 delete? liblink encodes like a divide (maybe wrong too)
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO 9a trouble	CREQV	1, 2, 3
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LMOVW psr ',' creg // TODO: should psr should be fpscr
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO 9a trouble	MOVW	FPSCR, CR1
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LMOVW creg ',' psr // TODO doesn't exist
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO 9a trouble	MOVW	CR1, SPR(7)
./src/cmd/asm/internal/asm/testdata/ppc64.s://	BR	0(R1)	// TODO should work
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LBRA creg ',' addr // TODO DOES NOT WORK in 9a
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LBRA creg ',' '(' xlreg ')' // TODO DOES NOT WORK in 9a
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LBRA con ',' rel // TODO DOES NOT WORK in 9a
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LBRA con ',' addr // TODO DOES NOT WORK in 9a
./src/cmd/asm/internal/asm/testdata/ppc64.s://	BC	4, (CTR)	// TODO - should work
./src/cmd/asm/internal/asm/testdata/ppc64.s://	BC	3, 4, label1 // TODO - should work
./src/cmd/asm/internal/asm/testdata/ppc64.s://	LBRA con ',' con ',' addr // TODO mystery
./src/cmd/asm/internal/asm/testdata/ppc64.s://TODO 9a trouble	BC	3, 3, 4(R1)
./src/cmd/asm/internal/asm/testdata/ppc64.s:// conditional trap // TODO NOT DEFINED
./src/cmd/asm/internal/asm/testdata/ppc64.s:// TODO these instructions are not in lex.go
./src/cmd/asm/internal/asm/testdata/ppc64.s://	MOVMW	foo+0(SB), R2 // TODO TLS broke this!
./src/cmd/asm/internal/asm/testdata/ppc64.s://	MOVMW	R1, foo+0(SB) // TODO TLS broke this!
./src/cmd/asm/internal/lex/slice.go:	// TODO: Col is only called when defining a macro and all it cares about is increasing
./src/cmd/asm/internal/lex/tokenizer.go:		// TODO: If we ever have //go: comments in assembly, will need to keep them here.
./src/cmd/cgo/gcc.go:	// TODO: Note that this fails if nil is shadowed.
./src/cmd/cgo/gcc.go:		// TODO: Handle types defined within function.
./src/cmd/cgo/gcc.go:		// TODO: what if true is shadowed?
./src/cmd/cgo/gcc.go:		// TODO: This ignores shadowing.
./src/cmd/cgo/gcc.go:	// TODO(rsc): require failure
./src/cmd/cgo/gcc.go:			t.Align = 1 // TODO: should probably base this on field alignment.
./src/cmd/cgo/gcc.go:			// TODO: it would be safer to only do this if
./src/cmd/cgo/gcc.go:		// TODO: Handle fields that are anonymous structs by
./src/cmd/cgo/gcc.go:// TODO: Currently our best solution is to find these manually and list them as
./src/cmd/cgo/main.go:// TODO(rsc):
./src/cmd/cgo/out.go:		// TODO: Handle types defined within a function.
./src/cmd/compile/fmt_test.go:	// TODO(gri) verify _test files outside package
./src/cmd/compile/internal/amd64/ssa.go:		// TODO(khr): issue only the -1 fixup code we need.
./src/cmd/compile/internal/amd64/ssa.go:		// TODO(rasky): we could generate:
./src/cmd/compile/internal/amd64/ssa.go:	case ssa.OpCopy: // TODO: use MOVQreg for reg->reg copies instead of OpCopy?
./src/cmd/compile/internal/amd64/ssa.go:		// TODO: We currently use the 2-byte instruction TESTB AX, (reg).
./src/cmd/compile/internal/arm/ssa.go:		// TODO: implement for clobberdead experiment. Nop is ok for now.
./src/cmd/compile/internal/arm64/ssa.go:		// TODO: implement for clobberdead experiment. Nop is ok for now.
./src/cmd/compile/internal/gc/alg.go:				nx := nodSym(OXDOT, np, f.Sym) // TODO: fields from other packages?
./src/cmd/compile/internal/gc/alg.go:			nx := nodSym(OXDOT, np, f.Sym) // TODO: fields from other packages?
./src/cmd/compile/internal/gc/alg.go:			// TODO(rsc): All the calls to newname are wrong for
./src/cmd/compile/internal/gc/align.go:			// TODO(mdempsky): Revisit this.
./src/cmd/compile/internal/gc/asm_test.go:		// TODO: remove if we can get "go tool compile -S" to work on windows.
./src/cmd/compile/internal/gc/bexport.go:// TODO(gri) enable selectively and remove once issues caused by it are fixed
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) Closures have dots in their names;
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) Optimization: Probably worthwhile collecting
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) The rest of this loop body is identical with
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) Closures have dots in their names;
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) Optimization: Probably worthwhile collecting
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) determine if we need the typecheck call here
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) In inlined functions, constants are used directly
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) Determine if they are already sorted
./src/cmd/compile/internal/gc/bexport.go:	// TODO(gri) If we don't have an exported function
./src/cmd/compile/internal/gc/bexport.go:			// TODO(gri) review parameter name encoding
./src/cmd/compile/internal/gc/bexport.go:			// TODO(gri) This is compiler-specific. Try using importpkg
./src/cmd/compile/internal/gc/bexport.go:	// TODO(gri) This is compiler-specific (escape info).
./src/cmd/compile/internal/gc/bexport.go:// TODO(gri) Improve tracing output. The current format is difficult to read.
./src/cmd/compile/internal/gc/bexport.go:		// TODO inlining produces expressions with ninits. we can't export these yet.
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) these should not be exported in the first place
./src/cmd/compile/internal/gc/bexport.go:		// TODO(gri) why is this considered an expression in fmt.go?
./src/cmd/compile/internal/gc/bexport.go:	// TODO(gri) can we assert this with an explicit check?
./src/cmd/compile/internal/gc/bimport.go:		// TODO(gri) Remove this support eventually; after Go1.8.
./src/cmd/compile/internal/gc/bimport.go:			recv := p.paramList() // TODO(gri) do we need a full param list for the receiver?
./src/cmd/compile/internal/gc/bimport.go:		// TODO(gri) Supply function/method package rather than
./src/cmd/compile/internal/gc/bimport.go:		// TODO(mdempsky): Need param position.
./src/cmd/compile/internal/gc/bimport.go:	// TODO(gri) This is compiler-specific (escape info).
./src/cmd/compile/internal/gc/bimport.go:// TODO(gri) split into expr and stmt
./src/cmd/compile/internal/gc/bimport.go:		// TODO(mdempsky): Export position information for OSTRUCTKEY nodes.
./src/cmd/compile/internal/gc/bimport.go:		// TODO(gri) these should not be exported in the first place
./src/cmd/compile/internal/gc/bimport.go:		return npos(pos, liststmt(variter([]*Node{lhs}, typ, nil))) // TODO(gri) avoid list creation
./src/cmd/compile/internal/gc/bimport.go:		// TODO(gri) eventually we must declare variables for type switch
./src/cmd/compile/internal/gc/dcl.go:// TODO(rsc): Use an ODCLFUNC node instead. See comment in CL 7360.
./src/cmd/compile/internal/gc/dcl.go:// TODO(rsc): Use an ODCLFUNC node instead. See comment in CL 7360.
./src/cmd/compile/internal/gc/dcl.go:		// TODO(rsc): If there is an outer variable x and we
./src/cmd/compile/internal/gc/dcl.go:		// TODO: n->left->missing = 1;
./src/cmd/compile/internal/gc/dcl.go:		// TODO(mdempsky): Add Pos directly to Field instead.
./src/cmd/compile/internal/gc/esc.go:	// TODO: keep a cache of these, mark entry/exit in escwalk to avoid allocation
./src/cmd/compile/internal/gc/esc.go:		e.escassignSinkWhy(n, n, escapeMsg) // TODO category: tooLarge
./src/cmd/compile/internal/gc/esc.go:		// TODO: leak to a dummy node instead
./src/cmd/compile/internal/gc/esc.go:	// TODO(rsc): Decide what the story is here. This is unsettling.
./src/cmd/compile/internal/gc/esc.go:		ret.SetAddable(false) // TODO(mdempsky): Seems suspicious.
./src/cmd/compile/internal/gc/esc.go:				e.escassignWhyWhere(n, arg, "arg to recursive call", call) // TODO this message needs help.
./src/cmd/compile/internal/gc/esc.go:		starwhy.src = src // TODO: need to reconcile this w/ needs of explanations.
./src/cmd/compile/internal/gc/esc.go:		// TODO: We get cycles. Trigger is i = &i (where var i interface{})
./src/cmd/compile/internal/gc/esc.go:	// TODO(mdempsky/drchase): Cleaner solution?
./src/cmd/compile/internal/gc/export.go:		// TODO(gri) is this still needed?
./src/cmd/compile/internal/gc/export.go:	if asNode(s.Def) != nil { // TODO: check if already the same.
./src/cmd/compile/internal/gc/fmt.go:// TODO(gri) verify these; eliminate those not used anymore
./src/cmd/compile/internal/gc/fmt.go:// TODO(gri): verify these
./src/cmd/compile/internal/gc/fmt.go:		if mode == FErr { // TODO maybe only if FmtShort, same below
./src/cmd/compile/internal/gc/fmt.go:	// TODO inlining produces expressions with ninits. we can't print these yet.
./src/cmd/compile/internal/gc/fmt.go:// TODO(gri) make variable local somehow
./src/cmd/compile/internal/gc/inl.go:	// hack, TODO, check for better way to link method nodes back to the thing with the ->inl
./src/cmd/compile/internal/gc/inl.go:		// TODO(mdempsky): Budget for OCLOSURE calls if we
./src/cmd/compile/internal/gc/inl.go:				// TODO(austin): Once mid-stack
./src/cmd/compile/internal/gc/inl.go:	// TODO(mdempsky/josharian): Hacks to appease toolstash; remove.
./src/cmd/compile/internal/gc/inl.go:	// TODO do them here (or earlier),
./src/cmd/compile/internal/gc/inl.go:// TODO: handle initial declaration not including an assignment and followed by a single assignment?
./src/cmd/compile/internal/gc/inl_test.go:			// TODO(mvdan): enable these once mid-stack
./src/cmd/compile/internal/gc/inl_test.go:			// TODO: these use panic, need mid-stack
./src/cmd/compile/internal/gc/lex.go:// TODO(gri) rename and eventually remove
./src/cmd/compile/internal/gc/main.go:	builtinpkg = types.NewPkg("go.builtin", "") // TODO(gri) name this package go.builtin?
./src/cmd/compile/internal/gc/main.go:	objabi.Flagcount("C", "disable printing of columns in error messages", &Debug['C']) // TODO(gri) remove eventually
./src/cmd/compile/internal/gc/main.go:	// TODO: Test and delete these conditions.
./src/cmd/compile/internal/gc/main.go:	// TODO: fix races and enable the following flags
./src/cmd/compile/internal/gc/mpint.go:		// TODO(gri) use different conversion function
./src/cmd/compile/internal/gc/noder.go:// TODO(gri) Can we eliminate fileh in favor of absFilename?
./src/cmd/compile/internal/gc/noder.go:				x = unparen(x) // TODO(mdempsky): Needed?
./src/cmd/compile/internal/gc/noder.go:					// TODO(mdempsky): Switch back to p.nod after we
./src/cmd/compile/internal/gc/noder.go:	// TODO(mdempsky): Be stricter? typecheck should handle errors anyway.
./src/cmd/compile/internal/gc/noder.go:			// TODO(mdempsky): Line number?
./src/cmd/compile/internal/gc/noder.go:	if label.Stmt != nil { // TODO(mdempsky): Should always be present.
./src/cmd/compile/internal/gc/noder.go:	// TODO: Don't try to convert if we had syntax errors (conversions may fail).
./src/cmd/compile/internal/gc/noder.go:	// TODO(mdempsky): Set line number?
./src/cmd/compile/internal/gc/noder.go:	// TODO(mdempsky): Set line number?
./src/cmd/compile/internal/gc/noder.go:		// TODO(mdempsky): Shouldn't happen. Fix package syntax.
./src/cmd/compile/internal/gc/noder.go:		// TODO(mdempsky): Shouldn't happen. Fix package syntax.
./src/cmd/compile/internal/gc/order.go:// TODO(rsc): The temporary introduction during multiple assignments
./src/cmd/compile/internal/gc/order.go:// TODO(rsc): Goto and multilevel break/continue can jump over
./src/cmd/compile/internal/gc/order.go:		// TODO: expand this to all static composite literal nodes?
./src/cmd/compile/internal/gc/order.go:			// TODO(rsc): Make tmp = literal expressions reuse tmp.
./src/cmd/compile/internal/gc/order.go:			// TODO(mdempsky): Is this actually necessary?
./src/cmd/compile/internal/gc/order.go:	// TODO(rsc): Clean temporaries more aggressively.
./src/cmd/compile/internal/gc/order.go:		// TODO(rsc): The isfat is for consistency with componentgen and walkexpr.
./src/cmd/compile/internal/gc/phi.go:// TODO: make this part of cmd/compile/internal/ssa somehow?
./src/cmd/compile/internal/gc/phi.go:		for var_ := range s.defvars[b.ID] { // TODO: encode defvars some other way (explicit ops)? make defvars[n] a slice instead of a map.
./src/cmd/compile/internal/gc/phi.go:				// TODO: if the variable is dead at c, skip it.
./src/cmd/compile/internal/gc/phi.go:				v := c.NewValue0I(currentRoot.Pos, ssa.OpPhi, typ, int64(n)) // TODO: line number right?
./src/cmd/compile/internal/gc/phi.go:// TODO: stop walking the iterated domininance frontier when
./src/cmd/compile/internal/gc/phi.go:// TODO: move this file to ../ssa, then use sparseSet there.
./src/cmd/compile/internal/gc/plive.go:// TODO(mdempsky): Update to reference OpVar{Def,Kill,Live} instead.
./src/cmd/compile/internal/gc/plive.go:	// TODO: if the output parameter is heap-allocated, then we
./src/cmd/compile/internal/gc/racewalk.go:// TODO(dvyukov): do not instrument initialization as writes:
./src/cmd/compile/internal/gc/range.go:			// TODO enhance the preemption check insertion so that this transformation is not necessary.
./src/cmd/compile/internal/gc/reflect.go:		// TODO(mdempsky): Investigate whether this can happen.
./src/cmd/compile/internal/gc/reflect.go:	// TODO(mdempsky): Short circuit before calling methods(t)?
./src/cmd/compile/internal/gc/select.go:	// TODO(rsc): Reenable optimization once order.go can handle it.
./src/cmd/compile/internal/gc/select.go:	// TODO(dvyukov): it's possible to generate Scase only once
./src/cmd/compile/internal/gc/sinit.go:// TODO: expand documentation.
./src/cmd/compile/internal/gc/sinit.go:		// TODO need to check bounds?
./src/cmd/compile/internal/gc/sinit.go:		// TODO(josharian): suppress alg generation for these types?
./src/cmd/compile/internal/gc/sinit.go:	// TODO(josharian): avoid map key temporaries for mapfast_* assignments with literal keys.
./src/cmd/compile/internal/gc/ssa.go:		// TODO: generate and print a mapping from nodes to values and blocks
./src/cmd/compile/internal/gc/ssa.go:	s.sp = s.entryNewValue0(ssa.OpSP, types.Types[TUINTPTR]) // TODO: use generic pointer type (unsafe.Pointer?) instead
./src/cmd/compile/internal/gc/ssa.go:					// TODO: could also seek minimum position?
./src/cmd/compile/internal/gc/ssa.go:	// TODO: keep a single varnum map, then make all of these maps slices instead?
./src/cmd/compile/internal/gc/ssa.go:				// TODO: never rewrite OPANIC to OCALLFUNC in the
./src/cmd/compile/internal/gc/ssa.go:			// TODO: detect defaults for len/cap also.
./src/cmd/compile/internal/gc/ssa.go:		// TODO: if val is ever spilled, we'd like to use the
./src/cmd/compile/internal/gc/ssa.go:			// TODO this is not executed because the front-end substitutes a runtime call.
./src/cmd/compile/internal/gc/ssa.go:			// TODO not sure if this is best done in wide precision or narrow
./src/cmd/compile/internal/gc/ssa.go:		// TODO: have the frontend give us branch prediction hints for
./src/cmd/compile/internal/gc/ssa.go:			// TODO: do we need to update named values here?
./src/cmd/compile/internal/gc/ssa.go:// TODO: do not emit sfcall if operation can be optimized to constant in later
./src/cmd/compile/internal/gc/ssa.go:	// TODO: when walk goes away someday, this code can go away also.
./src/cmd/compile/internal/gc/ssa.go:			// TODO: Make OpAddr use AuxInt as well as Aux.
./src/cmd/compile/internal/gc/ssa.go:			// TODO: handle this case? Named return values must be
./src/cmd/compile/internal/gc/ssa.go:		// TODO: treat as a PPARMOUT?
./src/cmd/compile/internal/gc/ssa.go:	// TODO: try to make more variables SSAable?
./src/cmd/compile/internal/gc/ssa.go:		// TODO: allow if all indexes are constant.
./src/cmd/compile/internal/gc/ssa.go:	// TODO: if the writebarrier pass knows how to reorder stores,
./src/cmd/compile/internal/gc/ssa.go:		// TODO: get rid of some of these temporaries.
./src/cmd/compile/internal/gc/ssa.go:		// from being assigned too early. See #14591 and #14762. TODO: allow this.
./src/cmd/compile/internal/gc/ssa.go:		if v.Op != ssa.OpArg && v.Op != ssa.OpVarDef && v.Pos.IsStmt() != src.PosNotStmt { // TODO will be == src.PosIsStmt in pending CL, more accurate
./src/cmd/compile/internal/gc/ssa.go:			// TODO: fix this (ideally without a global variable)
./src/cmd/compile/internal/gc/ssa.go:		if aloc := f.RegAlloc[a.ID]; aloc != loc { // TODO: .Equal() instead?
./src/cmd/compile/internal/gc/ssa.go:		// TODO(mdempsky): Can these differences be eliminated?
./src/cmd/compile/internal/gc/ssa.go:	// TODO: keep the result of this function somewhere in the ODOT Node
./src/cmd/compile/internal/gc/ssa_test.go:// TODO: move all these tests elsewhere?
./src/cmd/compile/internal/gc/subr.go:	// TODO(rsc,lvd): This behaves poorly in the presence of inlining.
./src/cmd/compile/internal/gc/subr.go:		// TODO(mdempsky): This seems overly conservative.
./src/cmd/compile/internal/gc/subr.go:		// TODO(mdempsky): Remove dependency on dotlist.
./src/cmd/compile/internal/gc/syntax.go:	_, nodeNoescape  // func arguments do not escape; TODO(rsc): move Noescape to Func struct (see CL 7360)
./src/cmd/compile/internal/gc/syntax.go:	// TODO: Should Func pragmas also be stored on the Name?
./src/cmd/compile/internal/gc/testdata/gen/arithBoundaryGen.go:			// TODO: clean up this duplication
./src/cmd/compile/internal/gc/testdata/gen/cmpConstGen.go:			// TODO: could also test constant on lhs.
./src/cmd/compile/internal/gc/typecheck.go:			// TODO(marvin): Fix Node.EType type union.
./src/cmd/compile/internal/gc/typecheck.go:	// TODO(rsc): simplify
./src/cmd/compile/internal/gc/typecheck.go:	// TODO(mdempsky): Fix Type rekinding.
./src/cmd/compile/internal/gc/typecheck.go:		n.Type.Sym = n.Sym // TODO(gri) this also happens in typecheckdeftype(n) - where should it happen?
./src/cmd/compile/internal/gc/typecheck.go:	// TODO(gri) The length argument requirements for (array/slice) make
./src/cmd/compile/internal/gc/types_acc.go:// TODO(gri) try to eliminate these soon
./src/cmd/compile/internal/gc/universe.go:// TODO(gri) This file should probably become part of package types.
./src/cmd/compile/internal/gc/universe.go:	// TODO(gri) Should we get rid of this special case (at the cost
./src/cmd/compile/internal/gc/walk.go:		// TODO(mdempsky): Just return n; see discussion on CL 38655.
./src/cmd/compile/internal/gc/walk.go:			// TODO(austin): Check all "implicit zeroing"
./src/cmd/compile/internal/gc/walk.go:		// TODO: Remove this code once we can introduce
./src/cmd/compile/internal/gc/walk.go:// TODO(josharian): combine this with its caller and simplify
./src/cmd/compile/internal/gc/walk.go:	// TODO(crawshaw): improve precision of match by working out
./src/cmd/compile/internal/mips/ggen.go:// TODO(mips): implement DUFFZERO
./src/cmd/compile/internal/mips/ssa.go:		// TODO: implement for clobberdead experiment. Nop is ok for now.
./src/cmd/compile/internal/mips64/ssa.go:		// TODO: implement for clobberdead experiment. Nop is ok for now.
./src/cmd/compile/internal/ppc64/ssa.go:		// TODO: implement for clobberdead experiment. Nop is ok for now.
./src/cmd/compile/internal/ppc64/ssa.go:	// TODO: need to work FP comparisons into block jumps
./src/cmd/compile/internal/ppc64/ssa.go:				// TODO: The second branch is probably predict-not-taken since it is for FP unordered
./src/cmd/compile/internal/ppc64/ssa.go:					// TODO: The second branch is probably predict-not-taken since it is for FP unordered
./src/cmd/compile/internal/s390x/ssa.go:		// TODO(mundaym): use the temp registers every time like x86 does with AX?
./src/cmd/compile/internal/s390x/ssa.go:		// TODO: implement for clobberdead experiment. Nop is ok for now.
./src/cmd/compile/internal/ssa/block.go:	// TODO: predecessors is a pain to maintain. Can we somehow order phi
./src/cmd/compile/internal/ssa/block.go:	// The list must include the control value, if any. (TODO: need this last condition?)
./src/cmd/compile/internal/ssa/check.go:			// TODO: check for cycles in values
./src/cmd/compile/internal/ssa/check.go:			// TODO: check type
./src/cmd/compile/internal/ssa/check.go:		// See TODO in regalloc.go.
./src/cmd/compile/internal/ssa/compile.go:	// TODO: debugging - set flags to control verbosity of compiler,
./src/cmd/compile/internal/ssa/compile.go:		// TODO: capture logging during this pass, add it to the HTML
./src/cmd/compile/internal/ssa/compile.go:// TODO: should be a config field
./src/cmd/compile/internal/ssa/compile.go:	// TODO: combine phielim and copyelim into a single pass?
./src/cmd/compile/internal/ssa/compile.go:	{name: "opt", fn: opt, required: true},               // TODO: split required rules and optimizing rules
./src/cmd/compile/internal/ssa/compile.go:	{name: "late opt", fn: opt, required: true}, // TODO: split required rules and optimizing rules
./src/cmd/compile/internal/ssa/config.go:	BytePtr    *types.Type // TODO: use unsafe.Pointer instead?
./src/cmd/compile/internal/ssa/config.go:		c.noDuffDevice = true // TODO: Resolve PPC64 DuffDevice (has zero, but not copy)
./src/cmd/compile/internal/ssa/config.go:	// TODO: get this from a flag, not an environment variable
./src/cmd/compile/internal/ssa/copyelim.go:	// (TODO: or can they? Needs a test.)
./src/cmd/compile/internal/ssa/deadstore.go:// This implementation only works within a basic block. TODO: use something more global.
./src/cmd/compile/internal/ssa/debug_test.go:// TODO: not implemented for Delve yet, but this is the plan
./src/cmd/compile/internal/ssa/debug_test.go:		// TODO: Technically not necessary in 1.10, but it causes a largish regression that needs investigation.
./src/cmd/compile/internal/ssa/debug_test.go:		// TODO, normalize between gdb and dlv into a common, comparable format.
./src/cmd/compile/internal/ssa/debug_test.go:		// TODO: here is where variable processing will be added.  See gdbState.stepnext as a guide.
./src/cmd/compile/internal/ssa/decompose.go:		// TODO(khr): Not sure what to do here.  Probably nothing.
./src/cmd/compile/internal/ssa/dom.go:	//TODO: benchmark and try to find criteria for swapping between
./src/cmd/compile/internal/ssa/dom.go:	// TODO: This loop is O(n^2). It used to be used in nilcheck,
./src/cmd/compile/internal/ssa/export_test.go:	// TODO(josharian): move universe initialization to the types package,
./src/cmd/compile/internal/ssa/flagalloc.go:	// TODO: Remove original instructions if they are never used.
./src/cmd/compile/internal/ssa/flagalloc.go:			// TODO: figure out how to do this without arch-dependent code.
./src/cmd/compile/internal/ssa/func_test.go:// TODO(matloob): Choose better names for Fun, Bloc, Goto, etc.
./src/cmd/compile/internal/ssa/func_test.go:// TODO(matloob): Write a parser for the Func disassembly. Maybe
./src/cmd/compile/internal/ssa/func_test.go:// TODO(matloob): Allow values and predecessors to be in different
./src/cmd/compile/internal/ssa/func_test.go:			// TODO(matloob): Make sure types are canonical and can
./src/cmd/compile/internal/ssa/func_test.go:				// TODO(matloob): Aux values may be *gc.Sym pointers in the near
./src/cmd/compile/internal/ssa/func_test.go:	// TODO: Either mark some SSA tests as t.Parallel,
./src/cmd/compile/internal/ssa/func_test.go:// TODO(matloob): choose a better name.
./src/cmd/compile/internal/ssa/fuse.go:// TODO: If ss doesn't contain any OpPhis, are s0 and s1 dead code anyway.
./src/cmd/compile/internal/ssa/gen/386.rules:// TODO: Should the optimizations be a separate pass?
./src/cmd/compile/internal/ssa/gen/386.rules:// TODO: DIVxU also.
./src/cmd/compile/internal/ssa/gen/386.rules:// TODO: since we got rid of the W/B versions, we might miss
./src/cmd/compile/internal/ssa/gen/386.rules:// TODO: more of this
./src/cmd/compile/internal/ssa/gen/386.rules:// TODO: more of this
./src/cmd/compile/internal/ssa/gen/386Ops.go:		// TODO: sign-extending indexed loads
./src/cmd/compile/internal/ssa/gen/386Ops.go:		// TODO: add size-mismatched indexed loads, like MOVBstoreidx4.
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: most runtime uses of atomic stores don't need that property.  Use normal stores for those?
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: Should the optimizations be a separate pass?
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: DIVxU also.
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: since we got rid of the W/B versions, we might miss
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: more of this
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: more of this
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: add indexed variants?
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: merging LEAQ doesn't work, assembler doesn't like the resulting instructions.
./src/cmd/compile/internal/ssa/gen/AMD64.rules:// TODO: merging LEAQ doesn't work, assembler doesn't like the resulting instructions.
./src/cmd/compile/internal/ssa/gen/AMD64Ops.go:		// TODO: should we have generic versions of these?
./src/cmd/compile/internal/ssa/gen/AMD64Ops.go:		// TODO: sign-extending indexed loads
./src/cmd/compile/internal/ssa/gen/AMD64Ops.go:		// TODO: mark the MOVXstoreidx1 ops as commutative.  Generates too many rewrite rules at the moment.
./src/cmd/compile/internal/ssa/gen/AMD64Ops.go:		// TODO: add size-mismatched indexed loads, like MOVBstoreidx4.
./src/cmd/compile/internal/ssa/gen/AMD64Ops.go:		// TODO: have these return flags instead of bool.  The current system generates:
./src/cmd/compile/internal/ssa/gen/ARMOps.go:			call:         false, // TODO(mdempsky): Should this be true?
./src/cmd/compile/internal/ssa/gen/genericOps.go:	// TODO: use for sync/atomic at some point.
./src/cmd/compile/internal/ssa/gen/PPC64.rules:// Elide compares of bit tests // TODO need to make both CC and result of ANDCC available.
./src/cmd/compile/internal/ssa/gen/PPC64.rules:// TODO deal with subtract-from-const
./src/cmd/compile/internal/ssa/gen/PPC64.rules:// TODO implement big endian loads and stores for little endian machines (using byte reverse
./src/cmd/compile/internal/ssa/gen/rulegen.go:	// TODO: when generating a constant result, use f.constVal to avoid
./src/cmd/compile/internal/ssa/gen/S390X.rules:// TODO: Should the optimizations be a separate pass?
./src/cmd/compile/internal/ssa/gen/S390X.rules:// TODO(mundaym): modify the assembler to accept 64-bit values
./src/cmd/compile/internal/ssa/gen/S390X.rules:// TODO: more of this
./src/cmd/compile/internal/ssa/gen/S390X.rules:// TODO: more of this
./src/cmd/compile/internal/ssa/gen/S390X.rules:// TODO(mundaym): use LARL in the assembler to handle SB?
./src/cmd/compile/internal/ssa/gen/S390X.rules:// TODO(mundaym): indexed versions of these?
./src/cmd/compile/internal/ssa/gen/S390XOps.go:		// TODO: have these return flags instead of bool.  The current system generates:
./src/cmd/compile/internal/ssa/html.go:        // TODO: pushState with updated state and read it on page load,
./src/cmd/compile/internal/ssa/html.go:	// TODO: Add visual representation of f's CFG.
./src/cmd/compile/internal/ssa/html.go:	// TODO: Using the value ID as the class ignores the fact
./src/cmd/compile/internal/ssa/html.go:	// TODO: Any intra-value formatting?
./src/cmd/compile/internal/ssa/html.go:	// TODO: Using the value ID as the class ignores the fact
./src/cmd/compile/internal/ssa/html.go:	// TODO: improve this for HTML?
./src/cmd/compile/internal/ssa/html.go:		// TODO does not begin to deal with the full complexity of line numbers.
./src/cmd/compile/internal/ssa/html.go:	// fprintFunc(&buf, f) // TODO: HTML, not text, <br /> for line breaks, etc.
./src/cmd/compile/internal/ssa/html.go:	// TODO: Make blocks collapsable?
./src/cmd/compile/internal/ssa/layout.go:			// TODO: also add blocks post-dominated by exit blocks
./src/cmd/compile/internal/ssa/layout.go:		// TODO: improve this part
./src/cmd/compile/internal/ssa/layout.go:		// TODO: Order these to minimize jump distances?
./src/cmd/compile/internal/ssa/likelyadjust.go:	hasIrreducible bool // TODO current treatment of irreducible loops is very flaky, if accurate loops are needed, must punt at function level.
./src/cmd/compile/internal/ssa/likelyadjust.go:			// Calls. TODO not all calls are equal, names give useful clues.
./src/cmd/compile/internal/ssa/likelyadjust.go:				// TODO what is best arrangement for nested loops?
./src/cmd/compile/internal/ssa/likelyadjust.go:				// TODO handle case where l is irreducible.
./src/cmd/compile/internal/ssa/loopbce.go:// TODO: handle 32 bit operations
./src/cmd/compile/internal/ssa/loopbce.go:		// TODO: Handle Leq64, Geq64.
./src/cmd/compile/internal/ssa/loopbce.go:		// TODO: handle negative increment.
./src/cmd/compile/internal/ssa/loopbce.go:		// TODO: save c as an offset from max.
./src/cmd/compile/internal/ssa/loopreschedchecks.go:	// TODO: when split information is recorded in export data, insert checks only on backedges that can be reached on a split-call-free path.
./src/cmd/compile/internal/ssa/loopreschedchecks.go:	for _, e := range backedges { // TODO: could filter here by calls in loops, if declared and inferred nosplit are recorded in export data.
./src/cmd/compile/internal/ssa/loopreschedchecks.go:		rewriteNewPhis(h, c, f, defsForUses, newphis, dfPhiTargets, sdom) // TODO: convert to explicit stack from recursion.
./src/cmd/compile/internal/ssa/loopreschedchecks.go:		addDFphis(x, h, c, f, defForUses, newphis, sdom) // TODO: convert to explicit stack from recursion.
./src/cmd/compile/internal/ssa/magic.go:// (TODO: derivation?)
./src/cmd/compile/internal/ssa/nilcheck.go:	// TODO: Eliminate more nil checks.
./src/cmd/compile/internal/ssa/nilcheck.go:		// TODO: if b.Kind == BlockPlain, start the analysis in the subsequent block to find
./src/cmd/compile/internal/ssa/phielim.go:// TODO: Can we also simplify cases like:
./src/cmd/compile/internal/ssa/phiopt.go:			// TODO: handle more than 2 predecessors, e.g. a || b || c.
./src/cmd/compile/internal/ssa/prove.go:	// TODO: check if there are cases that matter where we have
./src/cmd/compile/internal/ssa/prove.go:	// TODO: how about p->yes->b->yes, i.e. a loop in yes.
./src/cmd/compile/internal/ssa/regalloc.go:// TODO
./src/cmd/compile/internal/ssa/regalloc.go:// TODO: maybe we should introduce these extra phis?
./src/cmd/compile/internal/ssa/regalloc.go:	v *Value // pre-regalloc value held in this register (TODO: can we use ID here?)
./src/cmd/compile/internal/ssa/regalloc.go:	// TODO: Prefer registers with already spilled Values?
./src/cmd/compile/internal/ssa/regalloc.go:	// TODO: Modify preference using affinity graph.
./src/cmd/compile/internal/ssa/regalloc.go:	// TODO: if a single value is in multiple registers, spill one of them
./src/cmd/compile/internal/ssa/regalloc.go:			// TODO: pick best of (already processed) predecessors?
./src/cmd/compile/internal/ssa/regalloc.go:			// TODO: prioritize likely successor?
./src/cmd/compile/internal/ssa/regalloc.go:					// TODO(khr): We should really do this like allocReg does it,
./src/cmd/compile/internal/ssa/regalloc.go:			// TODO: sort by distance, pick the closest ones?
./src/cmd/compile/internal/ssa/regalloc.go:		// TODO: find a way to make this O(1) without arbitrary cutoffs.
./src/cmd/compile/internal/ssa/regalloc.go:					// TODO: reuse these slots. They'll need to be erased first.
./src/cmd/compile/internal/ssa/regalloc.go:// TODO: this could be quadratic if lots of variables are live across lots of
./src/cmd/compile/internal/ssa/regalloc.go:	// TODO: Do a better job yet. Here's one possibility:
./src/cmd/compile/internal/ssa/regalloc.go:					// TODO: if v is a phi, save desired register for phi inputs.
./src/cmd/compile/internal/ssa/regalloc_test.go:	// TODO: resurrect moving spills out of loops? We could put spills at the start of both exit1 and exit2.
./src/cmd/compile/internal/ssa/rewrite.go:// TODO: add floating-point conditions
./src/cmd/compile/internal/ssa/rewrite.go:// TODO: add floating-point conditions
./src/cmd/compile/internal/ssa/rewrite.go:		// TODO: all.bash runs compilers in parallel. Need to synchronize logging somehow?
./src/cmd/compile/internal/ssa/schedule.go:// reasonable valid schedule using a priority queue. TODO(khr):
./src/cmd/compile/internal/ssa/schedule.go:			//TODO: maybe remove ReadTuple score above, if it does not help on performance
./src/cmd/compile/internal/ssa/sparsetreemap.go:	block        *Block          // TODO: store this in a separate index.
./src/cmd/compile/internal/ssa/stackalloc.go:// TODO: live at start of block instead?
./src/cmd/compile/internal/ssa/stackalloc.go:	// TODO: share slots among equivalent types. We would need to
./src/cmd/compile/internal/ssa/stackalloc.go:// TODO: this could be quadratic if lots of variables are live across lots of
./src/cmd/compile/internal/ssa/stackalloc.go:						//TODO: remove?  Subsumed by SpillUse?
./src/cmd/compile/internal/ssa/testdata/hist.dlv-dbg.nexts:63:		hist := make([]int, 7)                                //gdb-opt=(dx/O,dy/O) // TODO sink is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.dlv-dbg.nexts:64:		var reader io.Reader = strings.NewReader(cannedInput) //gdb-dbg=(hist/A) // TODO cannedInput/A is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.dlv-opt.nexts:63:		hist := make([]int, 7)                                //gdb-opt=(dx/O,dy/O) // TODO sink is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.dlv-opt.nexts:64:		var reader io.Reader = strings.NewReader(cannedInput) //gdb-dbg=(hist/A) // TODO cannedInput/A is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.gdb-dbg.nexts:63:		hist := make([]int, 7)                                //gdb-opt=(dx/O,dy/O) // TODO sink is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.gdb-dbg.nexts:64:		var reader io.Reader = strings.NewReader(cannedInput) //gdb-dbg=(hist/A) // TODO cannedInput/A is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.gdb-opt.nexts:63:		hist := make([]int, 7)                                //gdb-opt=(dx/O,dy/O) // TODO sink is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.gdb-opt.nexts:64:		var reader io.Reader = strings.NewReader(cannedInput) //gdb-dbg=(hist/A) // TODO cannedInput/A is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.go:	hist := make([]int, 7)                                //gdb-opt=(dx/O,dy/O) // TODO sink is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/testdata/hist.go:	var reader io.Reader = strings.NewReader(cannedInput) //gdb-dbg=(hist/A) // TODO cannedInput/A is missing if this code is in 'test' instead of 'main'
./src/cmd/compile/internal/ssa/writebarrier.go:		// TODO: For OpStoreWB and the buffered write barrier,
./src/cmd/compile/internal/ssa/writebarrier.go:			// TODO(mdempsky): Find a cleaner way to
./src/cmd/compile/internal/syntax/branches.go:// TODO(gri) consider making this part of the parser code
./src/cmd/compile/internal/syntax/nodes.go:		Pragma Pragma     // TODO(mdempsky): Cleaner solution.
./src/cmd/compile/internal/syntax/nodes.go:		// TODO(mdempsky): This is only needed to report the "3-index
./src/cmd/compile/internal/syntax/nodes.go:		// TODO(gri) consider using Name{"..."} instead of nil (permits attaching of comments)
./src/cmd/compile/internal/syntax/nodes.go:// TODO(gri) Consider renaming to CommentPos, CommentPlacement, etc.
./src/cmd/compile/internal/syntax/nodes_test.go:	// TODO(gri) Once we have a general tree walker, we can use that to find
./src/cmd/compile/internal/syntax/parser.go:	// TODO(mdempsky): We need parens here so we can report an
./src/cmd/compile/internal/syntax/parser.go:		// TODO(gri) eventually may want to restrict valid syntax trees
./src/cmd/compile/internal/syntax/pos.go:// TODO(gri) IsKnown makes an assumption about linebase < 1.
./src/cmd/compile/internal/syntax/pos.go:// TODO(gri) cleanup: find better name, avoid conflict with position in error_test.go
./src/cmd/compile/internal/syntax/printer.go:// TODO(gri) Consider removing the linebreaks flag from this signature.
./src/cmd/compile/internal/syntax/printer.go:		panic(err) // TODO(gri) print something sensible into buf instead
./src/cmd/compile/internal/syntax/printer.go:		/*_Inc, _Dec,*/ _Rparen, _Rbrack, _Rbrace: // TODO(gri) fix this
./src/cmd/compile/internal/syntax/printer.go:// TODO(gri) provide table of []byte values for all tokens to avoid repeated string conversion
./src/cmd/compile/internal/syntax/printer.go:		// TODO(gri) do we need to handle /*-style comments containing newlines here?
./src/cmd/compile/internal/syntax/printer.go:		// 	// TODO(gri) act depending on sawNewline
./src/cmd/compile/internal/syntax/printer.go:		// 	// TODO(gri) should check that line comments are always followed by newline
./src/cmd/compile/internal/syntax/printer.go:			// TODO(gri) This check seems at the wrong place since it doesn't
./src/cmd/compile/internal/syntax/printer.go:				// TODO(gri) need to handle mandatory newlines after a //-style comment
./src/cmd/compile/internal/syntax/printer.go:	// 	// TODO(gri) in general we cannot make assumptions about whether
./src/cmd/compile/internal/syntax/printer.go:			// TODO(gri) eventually take precedence into account
./src/cmd/compile/internal/syntax/printer.go:			// TODO(gri) This is going to break the mayCombine
./src/cmd/compile/internal/syntax/printer.go:				// TODO(gri) clean this up
./src/cmd/compile/internal/syntax/printer.go:	// 	// TODO(gri) if there are comments inside the empty
./src/cmd/compile/internal/syntax/printer_test.go:		// TODO(gri) expand
./src/cmd/compile/internal/syntax/scanner_test.go:				// TODO(gri) make this use position info
./src/cmd/compile/internal/syntax/source.go:		// TODO(gri) Optimization: Instead of adjusting s.col for each character,
./src/cmd/compile/internal/types/pkg.go:	// TODO(gri) remove this check in favor of specialized lookup
./src/cmd/compile/internal/types/pkg.go:	// TODO(gri) remove this check in favor of specialized lookup
./src/cmd/compile/internal/types/type.go:// TODO(gri) try to eliminate soon
./src/cmd/compile/internal/types/type.go:	// TODO(josharian): lazily initialize some of these?
./src/cmd/compile/internal/types/type.go:	// TODO(mdempsky): Find out why this is necessary and explain.
./src/cmd/compile/internal/types/type.go:	// TODO(mdempsky): Validate t?
./src/cmd/compile/internal/types/type.go:	// TODO(mdempsky): Validate t?
./src/cmd/compile/internal/types/type.go:// TODO(josharian): make this safe for recursive interface types
./src/cmd/compile/internal/types/type.go:// TODO(mdempsky): Should it? See golang.org/issue/15028.
./src/cmd/compile/internal/types/type.go:	// TODO(josharian): If Type ever moves to a shared
./src/cmd/compile/internal/types/type.go:// TODO(austin): We probably only need HasHeapPointer. See
./src/cmd/compile/internal/types/utils.go:// TODO(gri) eliminate these dependencies.
./src/cmd/compile/internal/x86/ssa.go:				s.Prog(x86.ACDQ) //TODO: fix
./src/cmd/compile/internal/x86/ssa.go:	case ssa.OpCopy: // TODO: use MOVLreg for reg->reg copies instead of OpCopy?
./src/cmd/compile/internal/x86/ssa.go:		// TODO: We currently use the 2-byte instruction TESTB AX, (reg).
./src/cmd/cover/cover.go:// TODO: Nested simple blocks get unnecessary (but correct) counters
./src/cmd/cover/cover.go:// TODO: what if there's more than one? Probably doesn't matter much.
./src/cmd/cover/cover.go:	// TODO: what if there's more than one? Probably doesn't matter much.
./src/cmd/cover/profile.go:	line, col := 1, 2 // TODO: Why is this 2?
./src/cmd/dist/build.go:			// TODO(rsc): Really the builders could be writing out a better VERSION file instead,
./src/cmd/dist/build.go:		// TODO: why don't we generate go_asm.h for all packages
./src/cmd/dist/test.go:	// TODO(iant): Figure out how to catch this.
./src/cmd/doc/pkg.go:	// TODO: go/doc does not include typed constants in the constants
./src/cmd/doc/pkg.go:// TODO: Provide access to TODOs and NOTEs as well (very noisy so off by default)?
./src/cmd/doc/pkg.go:		// TODO: Should we elide unexported symbols from a single spec?
./src/cmd/doc/pkg.go:		// TODO: Would be nice if go/doc did this for us.
./src/cmd/doc/pkg.go:			// TODO: Anonymous methods (embedding)
./src/cmd/doc/pkg.go:			// TODO: Anonymous fields.
./src/cmd/fix/typecheck.go:// TODO(rsc,gri): Replace with go/typechecker.
./src/cmd/fix/typecheck.go:			case token.EQL, token.NEQ: // TODO: more cases. This is enough for the cftype fix.
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:// TODO(rsc): Set up a test case on SourceForge (?) for svn.
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO(iant): We should not have to use strconv.Quote here.
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/go_test.go:	// TODO: tg.parallel()
./src/cmd/go/internal/base/path.go:	// TODO(rsc): Can this use Cwd from above?
./src/cmd/go/internal/cache/default.go:	// TODO(rsc): This code belongs somewhere else,
./src/cmd/go/internal/clean/clean.go:// TODO: These are dregs left by Makefile-based builds.
./src/cmd/go/internal/clean/clean.go:			// TODO(adg,rsc): check that this .go file is actually
./src/cmd/go/internal/clean/clean.go:			// TODO: Remove once Makefiles are forgotten.
./src/cmd/go/internal/get/vcs_test.go:// TODO(cmang): Add tests for SVN and BZR.
./src/cmd/go/internal/list/list.go:		// TODO: Use pkgsFilter?
./src/cmd/go/internal/load/pkg.go:	// TODO? Target
./src/cmd/go/internal/load/pkg.go:		// TODO: The .swig and .swigcxx files can use
./src/cmd/go/internal/load/pkg.go:	// TODO: Remove this restriction.
./src/cmd/go/internal/test/test.go:	// TODO(rsc): Decide which tests are enabled by default.
./src/cmd/go/internal/work/action.go:			// TODO(rsc): Make this a unique key for a.Package somehow.
./src/cmd/go/internal/work/action.go:// TODO(rsc): Change the second key from *load.Package to interface{},
./src/cmd/go/internal/work/action.go:	// TODO(rsc): Eliminate the standard ones from the action graph,
./src/cmd/go/internal/work/action.go:			// TODO(rsc): Find a better discriminator than the Mode strings, once the dust settles.
./src/cmd/go/internal/work/action.go:			// TODO(rsc): The use of ModeInstall here is suspect, but if we only do ModeBuild,
./src/cmd/go/internal/work/action.go:			// TODO(rsc): Need to find some other place to store config,
./src/cmd/go/internal/work/action.go:		// TODO(rsc): Maybe this should only happen if "runtime" is in the original package set.
./src/cmd/go/internal/work/action.go:		// TODO(rsc): This should probably be changed to use load.LinkerDeps(p).
./src/cmd/go/internal/work/action.go:		// TODO(rsc): We don't add standard library imports for gccgo
./src/cmd/go/internal/work/action.go:			// TODO(rsc): Perhaps this cross-root check should apply to the full
./src/cmd/go/internal/work/action.go:			// TODO(rsc): Find out and explain here why gccgo is different.
./src/cmd/go/internal/work/build.go:	// TODO(mwhudson): Needs to change for platforms that use different naming
./src/cmd/go/internal/work/build.go:		// TODO(rsc): It's not clear why 'go get' should be different from 'go install' here. See #20760.
./src/cmd/go/internal/work/buildid.go:	// TODO(rsc): Rewrite this code to use a TryCache func on the link action.
./src/cmd/go/internal/work/build_test.go:	// TODO(avdva) - make these values platform-specific
./src/cmd/go/internal/work/exec.go:		// TODO(rsc): Should we include the SWIG version or Fortran/GCC/G++/Objective-C compiler versions?
./src/cmd/go/internal/work/exec.go:		// TODO(rsc): Convince compiler team not to add more magic environment variables,
./src/cmd/go/internal/work/exec.go:			// TODO(rsc): Once we can cache multiple file outputs from an action,
./src/cmd/go/internal/work/exec.go:	// TODO(rsc,gri): Try to remove this for Go 1.11.
./src/cmd/go/internal/work/exec.go:		// TODO(rsc): Convince linker team not to add more magic environment variables,
./src/cmd/go/internal/work/exec.go:		// TODO(rsc): Do cgo settings and flags need to be included?
./src/cmd/go/internal/work/exec.go:		// TODO(iant): Should probably include cgo flags here.
./src/cmd/go/internal/work/exec.go:	// TODO: BuildN
./src/cmd/go/internal/work/exec.go:	// TODO(rsc): There is a missing updateBuildID here,
./src/cmd/go/internal/work/exec.go:		// TODO(rsc): Once we know that caching is rebuilding
./src/cmd/go/internal/work/exec.go:// TODO: See issue 5279. The printing of commands needs a complete redo.
./src/cmd/go/internal/work/exec.go:	// TODO: CGO_FLAGS?
./src/cmd/go/internal/work/exec.go:	// TODO: make cgo not depend on $GOARCH?
./src/cmd/go/internal/work/exec.go:// TODO: Don't build a shared library, once SWIG emits the necessary
./src/cmd/go/internal/work/gc.go:	// TODO: Test and delete these conditions.
./src/cmd/go/internal/work/gc.go:	// TODO(josharian): attempt to detect whether this particular compilation
./src/cmd/go/internal/work/gccgo.go:				// TODO(rsc): We could do better about showing the right _cgo_flags even in -n mode.
./src/cmd/go/internal/work/init.go:			// TODO(mwhudson): remove -w when that gets fixed in linker.
./src/cmd/gofmt/internal.go:// TODO(gri): This file and the file src/go/format/internal.go are
./src/cmd/gofmt/testdata/typealias.golden:// TODO(gri) We may want to put the '=' into a separate column if
./src/cmd/gofmt/testdata/typealias.input:// TODO(gri) We may want to put the '=' into a separate column if
./src/cmd/internal/buildid/buildid.go:		// TODO(iant): Make a debug/ar package, and use it
./src/cmd/internal/dwarf/dwarf.go:		// TODO(ribrdb): verify padded strings are never used and remove this
./src/cmd/internal/goobj/read.go:// TODO(rsc): Decide where this package should live. (golang.org/issue/6932)
./src/cmd/internal/goobj/read.go:// TODO(rsc): Decide the appropriate integer types for various fields.
./src/cmd/internal/goobj/read.go:	// TODO(rsc): The interpretation of Type is not exposed by this package.
./src/cmd/internal/goobj/read.go:	Kind   int64  // TODO(rsc): Define meaning.
./src/cmd/internal/goobj/read.go:	Offset int64  // Frame offset. TODO(rsc): Define meaning.
./src/cmd/internal/goobj/read.go:// TODO: Add PCData []byte and PCDataIter (similar to liblink).
./src/cmd/internal/goobj/read.go:	// TODO: extract OS + build ID if/when we need it
./src/cmd/internal/goobj/read.go:				f.FuncData[i].Offset = r.readInt() // TODO
./src/cmd/internal/obj/arm/asm5.go:	// TODO: handle some more cases, like where
./src/cmd/internal/obj/arm64/a.out.go:	// TODO(aram): only one branch class should be enough
./src/cmd/internal/obj/arm64/a.out.go:	C_ADDR // TODO(aram): explain difference from C_VCONADDR
./src/cmd/internal/obj/arm64/asm7.go:	/* TODO: MVN C_SHIFT */
./src/cmd/internal/obj/arm64/asm7.go:	// TODO: these don't work properly.
./src/cmd/internal/obj/arm64/asm7.go:		if p.As == AB || p.As == obj.ARET || p.As == AERET { /* TODO: other unconditional operations */
./src/cmd/internal/obj/arm64/asm7.go: * TODO: hash
./src/cmd/internal/obj/arm64/asm7.go:	// TODO(aram): remove.
./src/cmd/internal/obj/arm64/asm7.go:		/* TODO: could be clever, and use general constant builder */
./src/cmd/internal/obj/arm64/doc.go:    // TODO
./src/cmd/internal/obj/arm64/doc.go:    // TODO
./src/cmd/internal/obj/data.go:	// TODO(dfc) append cap-len at once, rather than
./src/cmd/internal/obj/line.go:	// TODO(gri) Should this use relative or absolute line number?
./src/cmd/internal/obj/mips/obj0.go:	// TODO(minux): add morestack short-cuts with small fixed frame-size.
./src/cmd/internal/obj/pass.go:		// TODO(rsc): After fixing SHRQ, check a.Index != 0 too.
./src/cmd/internal/obj/pass.go:		// TODO(rsc): After fixing PINSRQ, check a.Offset != 0 too.
./src/cmd/internal/obj/pass.go:		// TODO(rsc): After fixing SHRQ, check a.Index != 0 too.
./src/cmd/internal/obj/pass.go:			// TODO: Remove To.Val.(*Prog) in favor of p->pcond.
./src/cmd/internal/obj/pcln.go:				// TODO: Dedup.
./src/cmd/internal/obj/ppc64/obj9.go:	// TODO(minux): add morestack short-cuts with small fixed frame-size.
./src/cmd/internal/obj/s390x/a.out.go:	f(REG_V1, 2, REG_V7, 20) // TODO what about V16:31?
./src/cmd/internal/obj/s390x/asmz.go:		// TODO(mundaym): merge with case 24.
./src/cmd/internal/obj/s390x/asmz.go:		// TODO(mundaym): should this be fixed at round to nearest, ties to even?
./src/cmd/internal/obj/s390x/asmz.go:		// TODO(mundaym): add R_390_TLS_LOAD relocation here
./src/cmd/internal/obj/s390x/objz.go:	// TODO(minux): add morestack short-cuts with small fixed frame-size.
./src/cmd/internal/obj/textflag.go:	// TODO(mwhudson): only implemented for ppc64x at present.
./src/cmd/internal/obj/util.go:	// TODO For now, this is only used for debugging output, and if we need more/better information, it might change.
./src/cmd/internal/obj/util.go:		// TODO(rsc): This special case is for x86 instructions like
./src/cmd/internal/obj/x86/asm6.go:	{ANOTL, yscond, Px, [23]uint8{0xf7, 02}}, // TODO(rsc): yscond is wrong here.
./src/cmd/internal/obj/x86/asm6.go:		// TODO(rsc): DUFFZERO/DUFFCOPY encoding forgot to set a->index
./src/cmd/internal/obj/x86/asm6.go:			// TODO: jump across functions needs reloc
./src/cmd/internal/obj/x86/asm6.go:				// TODO: Check in input, preserve in brchain.
./src/cmd/internal/obj/x86/asm6.go:					case objabi.Hsolaris: // TODO(rsc): Delete Hsolaris from list. Should not use this code. See progedit in obj6.c.
./src/cmd/internal/obj/x86/asm6.go:			// TODO(rsc): Use this code for x86-64 too. It has bug fixes not present in the amd64 code base.
./src/cmd/internal/obj/x86/asm6.go:			// TODO(rsc): Use this code for x86-64 too. It has bug fixes not present in the amd64 code base.
./src/cmd/internal/obj/x86/obj6.go:		// TODO(rsc): Remove the Hsolaris special case. It exists only to
./src/cmd/internal/obj/x86/obj6.go:			q.From.Scale = 2 // TODO: use 1
./src/cmd/internal/obj/x86/obj6.go:	// TODO: Remove.
./src/cmd/internal/obj/x86/obj6.go:		//    TODO: Maybe someday we label them all with NOFRAME and get rid of this heuristic.
./src/cmd/internal/obj/x86/obj6.go:	// TODO(rsc): Remove.
./src/cmd/internal/obj/x86/obj6.go:	// TODO(rsc): Remove 'ctxt.Arch.Family == sys.AMD64 &&'.
./src/cmd/internal/obj/x86/obj6_test.go:		// TODO: make this work? It was failing due to the
./src/cmd/internal/objabi/doc.go:// TODO(rsc): The file format is good for a first pass but needs work.
./src/cmd/internal/objabi/reloctype.go:	// TODO(mundaym): remove once variants can be serialized - see issue 14218.
./src/cmd/internal/objabi/symkind.go:// TODO(rsc): Give idiomatic Go names.
./src/cmd/internal/objfile/goobj.go:	// TODO: this is really inefficient. Binary search? Memoize last result?
./src/cmd/internal/objfile/pe.go:		// TODO: Remove code looking for the old symbols when we no longer care about 1.3.
./src/cmd/internal/objfile/plan9obj.go:		// TODO: Remove code looking for the old symbols when we no longer care about 1.3.
./src/cmd/internal/src/pos.go:	// TODO(gri) This may not be true if we have an inlining base.
./src/cmd/link/dwarf_test.go:			// TODO: We'd like to use filepath.Join here.
./src/cmd/link/internal/amd64/asm.go:		// TODO(mwhudson): the test of VisibilityHidden here probably doesn't make
./src/cmd/link/internal/amd64/asm.go:		// TODO: just needs relocation, no need to put in .dynsym
./src/cmd/link/internal/amd64/asm.go:		// TODO: What is the difference between all these?
./src/cmd/link/internal/amd64/asm.go:			// TODO: We generate a R_X86_64_64 relocation for every R_ADDR, even
./src/cmd/link/internal/amd64/asm.go:				// TODO: never happens, remove.
./src/cmd/link/internal/arm/asm.go:		// TODO: rationalize
./src/cmd/link/internal/arm64/asm.go:	// TODO(aram)
./src/cmd/link/internal/arm64/asm.go:		// TODO: rationalize
./src/cmd/link/internal/ld/data.go:		// TODO(mundaym): remove this special case - see issue 14218.
./src/cmd/link/internal/ld/data.go:				// TODO: o += r.Add when ctxt.Arch.Family != sys.AMD64?
./src/cmd/link/internal/ld/data.go:			// TODO(rsc): Remove.
./src/cmd/link/internal/ld/data.go:	// TODO(mwhudson): It would make sense to do this more widely, but it makes
./src/cmd/link/internal/ld/dwarf.go:// TODO/NICETOHAVE:
./src/cmd/link/internal/ld/dwarf.go:	// TODO: Make this be the actual compilation directory, not
./src/cmd/link/internal/ld/dwarf.go:		// TODO this loop looks like it could exit with work remaining.
./src/cmd/link/internal/ld/dwarf.go:				// TODO(bryanpkc): This is imprecise. In general, the instruction
./src/cmd/link/internal/ld/dwarf_test.go:	// TODO(hyangah): define in debug/dwarf package
./src/cmd/link/internal/ld/elf.go:			// TODO(mwhudson): the approach here will work OK when
./src/cmd/link/internal/ld/elf.go:		// TODO(mwhudson): presumably the behavior should actually be the same on both arm and 386.
./src/cmd/link/internal/ld/go.go:// TODO:
./src/cmd/link/internal/ld/lib.go:				// TODO: maybe do something similar to peimporteddlls to collect all lib names
./src/cmd/link/internal/ld/lib.go:// TODO: Record enough information in new object files to
./src/cmd/link/internal/ld/lib.go:		// TODO(mwhudson): actually think about this.
./src/cmd/link/internal/ld/lib.go:		// TODO(mwhudson): the test of VisibilityHidden here probably doesn't make
./src/cmd/link/internal/ld/main.go:	// TODO(matloob): define these above and then check flag values here
./src/cmd/link/internal/ld/pcln.go:		// TODO: Move into funcinfo.
./src/cmd/link/internal/ld/pcln.go:					// TODO: Dedup.
./src/cmd/link/internal/ld/pe.go:// TODO(crawshaw): add these constants to debug/pe.
./src/cmd/link/internal/ld/pe.go:	// TODO: the Microsoft doco says IMAGE_SYM_DTYPE_ARRAY is 3 and IMAGE_SYM_DTYPE_FUNCTION is 2
./src/cmd/link/internal/ld/pe.go:			// TODO: fix IMAGE_SYM_DTYPE_ARRAY value and use following expression, instead of 0x0308
./src/cmd/link/internal/ld/pe.go:		// TODO(brainman): Maybe remove optional header writing altogether for cgo.
./src/cmd/link/internal/ld/symtab.go:		// TODO(mwhudson): We only set AttrVisibilityHidden in ldelf, i.e. when
./src/cmd/link/internal/ld/util.go:// TODO(josharian): delete. See issue 19865.
./src/cmd/link/internal/loadelf/ldelf.go:// TODO(crawshaw): de-duplicate with cmd/link/internal/ld/elf.go.
./src/cmd/link/internal/loadelf/ldelf.go:// TODO: find a better place for this logic.
./src/cmd/link/internal/loadelf/ldelf.go:				// TODO(dfc) should this return an error?
./src/cmd/link/internal/loadelf/ldelf.go:				// TODO(minux): correctly handle __i686.get_pc_thunk.bx without
./src/cmd/link/internal/loadelf/ldelf.go:	// TODO(mwhudson): the test of VisibilityHidden here probably doesn't make
./src/cmd/link/internal/loadelf/ldelf.go:	// TODO(mdempsky): Replace this with a struct-valued switch statement
./src/cmd/link/internal/loadmacho/ldmacho.go:// TODO(crawshaw): de-duplicate these symbols with cmd/internal/ld
./src/cmd/link/internal/loadmacho/ldmacho.go:		// TODO(rsc): Wrong interpretation for big-endian bitfields?
./src/cmd/link/internal/loadmacho/ldmacho.go:		// TODO: check sym->type against outer->type.
./src/cmd/link/internal/loadpe/ldpe.go:	// TODO: the Microsoft doco says IMAGE_SYM_DTYPE_ARRAY is 3 (same with IMAGE_SYM_DTYPE_POINTER and IMAGE_SYM_DTYPE_FUNCTION)
./src/cmd/link/internal/loadpe/ldpe.go:// TODO(crawshaw): de-duplicate these symbols with cmd/internal/ld, ideally in debug/pe.
./src/cmd/link/internal/loadpe/ldpe.go:// TODO(brainman): maybe just add ReadAt method to bio.Reader instead of creating peBiobuf
./src/cmd/link/internal/loadpe/ldpe.go:	// TODO: replace pe.NewFile with pe.Load (grep for "add Load function" in debug/pe for details)
./src/cmd/link/internal/loadpe/ldpe.go:	// TODO return error if found .cormeta
./src/cmd/link/internal/mips64/asm.go:		// TODO: rationalize
./src/cmd/link/internal/objfile/objfile.go:			// TODO: use bufio.Reader.Discard if available instead?
./src/cmd/link/internal/ppc64/asm.go:	// TODO(austin): Translate our relocations to ELF
./src/cmd/link/internal/ppc64/asm.go:		// TODO(austin): ABI v1 is different
./src/cmd/link/internal/ppc64/asm.go:		// TODO: rationalize
./src/cmd/link/internal/ppc64/obj.go:		// TODO(austin): ABI v1 uses /usr/lib/ld.so.1,
./src/cmd/link/internal/ppc64/obj.go:			*ld.FlagD = true // TODO(austin): ELF ABI v1 not supported yet
./src/cmd/link/internal/s390x/asm.go:		// TODO(mwhudson): the test of VisibilityHidden here probably doesn't make
./src/cmd/link/internal/s390x/asm.go:		// TODO(mundaym): all DBL style relocations should be
./src/cmd/link/internal/sym/attribute.go:	// TODO(mwhudson): fix the inconsistencies noticed above.
./src/cmd/link/internal/sym/attribute.go:	// TODO(mwhudson): perhaps a better name for this is AttrNonGoSymbol.
./src/cmd/link/internal/sym/symkind.go:// TODO(rsc): Give idiomatic Go names.
./src/cmd/link/internal/x86/asm.go:		thunkfunc.Attr |= sym.AttrReachable //TODO: remove?
./src/cmd/link/internal/x86/asm.go:		// TODO(mwhudson): the test of VisibilityHidden here probably doesn't make
./src/cmd/link/internal/x86/asm.go:		// TODO: rationalize
./src/cmd/objdump/objdump_test.go:	// TODO(jsing): Reenable once openbsd/arm has external linking support.
./src/cmd/pprof/pprof.go:					// TODO: AT_linkage_name, AT_MIPS_linkage_name.
./src/cmd/pprof/pprof.go:	// TODO: Report inlined functions.
./src/cmd/trace/annotations.go:		// TODO: include stack trace of creation time
./src/cmd/trace/annotations.go:		// of analyzeGoroutines. TODO(hyangah): fix this not to depend
./src/cmd/trace/annotations.go:		// TODO: This formatting is pretty awful.
./src/cmd/trace/annotations.go:		// TODO: add child task creation events into the parent task events
./src/cmd/trace/annotations_test.go:	// TODO: classify taskless spans
./src/cmd/trace/annotations_test.go:			// TODO(hyangah): a tighter upper bound is gcTime, but
./src/cmd/trace/goroutines.go:	// TODO(hyangah): support format=csv (raw data)
./src/cmd/trace/pprof.go:			// TODO(hyangah): figure out why EvGoBlockGC should be here.
./src/cmd/trace/trace.go:			// TODO(hyangah): add this for task/P-oriented mode (i.e., focustask view) too.
./src/cmd/trace/trace.go:			// TODO: get rid of the extra \n inserted by enc.Encode.
./src/cmd/trace/trace_unix_test.go:	// TODO: syscall.Pipe used to cause the goroutine to
./src/cmd/vendor/github.com/google/pprof/internal/driver/driver_focus.go:						// TODO: Match against val, not key:val in future
./src/cmd/vendor/github.com/google/pprof/internal/driver/webhtml.go:        // TODO: Display error state in search box
./src/cmd/vendor/github.com/google/pprof/internal/report/report.go:	// TODO: modify to select first numeric tag if no bytes tag
./src/cmd/vendor/github.com/google/pprof/internal/report/report.go:			// TODO: This address may be in the middle of a call
./src/cmd/vendor/golang.org/x/arch/arm/armasm/inst.go:// TODO(rsc): Define which program counter (PC+4? PC+8? PC?).
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/condition_util.go:	// TODO: system instruction
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/decode.go:		//TODO: system instruction
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/decode.go:		//TODO: system instruction
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/decode.go:		//TODO: system instruction
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/decode.go:		//TODO: system instruction
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/decode_test.go:		// TODO: system instruction.
./src/cmd/vendor/golang.org/x/arch/arm64/arm64asm/objdump_test.go:// TODO: system instruction.
./src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/objdump_test.go:		return true // TODO(minux): we lack the support for extended opcodes here
./src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/objdump_test.go:		return true // TODO(minux): we lack the support for extended opcodes here
./src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/objdump_test.go:// TODO(minux): those single precision instructions are missing from ppc64.csv
./src/cmd/vendor/golang.org/x/arch/ppc64/ppc64asm/plan9.go:	LBZU: "MOVBZU", STBU: "MOVBU", // TODO(minux): indexed forms are not handled
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:// TODO(rsc): We may be able to merge various of the memory operands
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:// TODO(rsc): This is for testing. Only use this if a flag is given.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:		// TODO(rsc): 64-bit mode not tested, probably not working.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:	for pc := 1; ; { // TODO uint
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:			// TODO(rsc): Can address be 64 bits?
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:		case xArgMm2: // register only; TODO(rsc): Handle with tag modrm_regonly tag
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:		case xArgXmm2: // register only; TODO(rsc): Handle with tag modrm_regonly tag
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:	// TODO(rsc): Perhaps add these to the tables and
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:	// TODO(rsc): Perhaps this instruction class should be derived from the CSV.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:	// TODO(rsc): Perhaps this instruction class should be derived from the CSV.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:		// TODO(rsc): Perhaps this instruction class should be derived from the CSV.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/decode.go:			// TODO(rsc): Perhaps this instruction class should be derived from the CSV.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/gnu.go:		// TODO(rsc): Test to ensure Intel manuals are correct and report to libopcodes maintainers?
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/intel.go:	// TODO: Maybe the constants are named wrong.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/objdump_test.go:	// TODO(rsc): Are they invalid somehow?
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/objdump_test.go:	// TODO(rsc): Fix, since we are probably wrong, but we don't have vmptrld in the manual.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/testdata/libmach8db.c:	// TODO: Translate known names.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/xed_test.go:	// TODO(rsc): Fix, since we are probably wrong, but we don't have vmptrld in the manual.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/xed_test.go:	// TODO(rsc): Fix to reject this encoding.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/xed_test.go:	// TODO(rsc): Fix.
./src/cmd/vendor/golang.org/x/arch/x86/x86asm/xed_test.go:	// TODO(rsc): Fix.
./src/cmd/vet/all/main.go:		// TODO(neelance): enable as soon as js/wasm has fully landed
./src/cmd/vet/all/main.go:	// TODO: The unsafeptr checks are disabled for now,
./src/cmd/vet/assign.go:// TODO: should also check for assignments to struct fields inside methods
./src/cmd/vet/dead.go:		// TODO: This handles integer comparisons only.
./src/cmd/vet/deadcode.go:// TODO(adonovan): use the new cfg package, which is more precise.
./src/cmd/vet/internal/cfg/builder.go:	// TODO(adonovan): fix: evaluate only channel exprs here.
./src/cmd/vet/print.go:// TODO(rsc): Incorporate user-defined printf wrappers again.
./src/cmd/vet/print.go:			// TODO: Disable complaint about '0' for Go 1.10. To be fixed properly in 1.11.
./src/cmd/vet/shadow.go:// Cases this gets wrong (TODO):
./src/cmd/vet/testdata/bool.go:	// TODO: distinguish from an actual func call
./src/cmd/vet/testdata/bool.go:	_ = err != nil || err != io.EOF // TODO catch this case?
./src/cmd/vet/testdata/copylock_func.go:// TODO: Unfortunate cases
./src/cmd/vet/testdata/print.go:// TODO(rsc): The user-defined wrapper tests are commented out
./src/cmd/vet/testdata/print.go:// enabled during go test. See the TODO in ../print.go for a plan
./src/cmd/vet/testdata/print.go:// TODO: Disable complaint about '0' for Go 1.10. To be fixed properly in 1.11.
./src/cmd/vet/types.go:			return t&argPointer != 0 // TODO?
./src/cmd/vet/vet_test.go:		// TODO: Remove print.go exception once we require type checking for everything,
./src/compress/bzip2/bzip2.go:	bz2.wantBlockCRC = uint32(br.ReadBits64(32)) // skip checksum. TODO: check it if we can figure out what it is.
./src/compress/lzw/reader.go:// TODO(nigeltao): check that PDF uses LZW in the same way as GIF,
./src/context/context.go:// Do not pass a nil Context, even if a function permits it. Pass context.TODO
./src/context/context.go:		return "context.TODO"
./src/context/context.go:// TODO returns a non-nil, empty Context. Code should use context.TODO when
./src/context/context.go:// parameter). TODO is recognized by static analysis tools that determine
./src/context/context.go:func TODO() Context {
./src/context/context_test.go:func XTestTODO(t testingT) {
./src/context/context_test.go:	c := TODO()
./src/context/context_test.go:		t.Fatalf("TODO returned nil")
./src/context/context_test.go:	if got, want := fmt.Sprint(c), "context.TODO"; got != want {
./src/context/context_test.go:		t.Errorf("TODO().String() = %q want %q", got, want)
./src/context/context_test.go:			// TODO(iant): Remove this when gccgo does do escape analysis.
./src/context/x_test.go:func TestTODO(t *testing.T)                            { XTestTODO(t) }
./src/crypto/aes/gcm_s390x.go:// TODO(mundaym): could pass in hash subkey
./src/crypto/cipher/xor.go:		// TODO(hanwen): if (dst, a, b) have common alignment
./src/crypto/md5/md5block_ppc64le.s:// TODO: Could be updated for ppc64 big endian
./src/crypto/rsa/rsa.go:	// TODO(agl): can we get away with reusing blinds?
./src/crypto/tls/common.go:// TODO(jsing): Make these available to both crypto/x509 and crypto/tls.
./src/crypto/tls/conn.go:			// TODO(bradfitz,agl): slightly suspicious
./src/crypto/tls/conn.go:		// TODO(rsc): Should at least pick off connection close.
./src/crypto/x509/root_cgo_darwin.go:						// TODO: The rest of the dictionary specifies conditions for evaluation.
./src/crypto/x509/root_cgo_darwin.go:		// TODO: better error message
./src/crypto/x509/root_windows.go:	// TODO(mkrautz): use the lChainIndex and lElementIndex fields
./src/crypto/x509/root_windows.go:	// TODO: restore this functionality on Windows. We tried to do
./src/crypto/x509/x509.go:// TODO(agl): remove this hack once their reissued root is sufficiently
./src/crypto/x509/x509.go:	// TODO(agl): don't ignore the path length constraint.
./src/crypto/x509/x509.go:				// TODO: map out.MaxPathLen to 0 if it has the -1 default value? (Issue 19285)
./src/database/sql/fakedb_test.go:		// TODO(bradfitz): convert to subset types? naah, I
./src/database/sql/fakedb_test.go:		// TODO(coopernurse): add type-specific converter
./src/database/sql/fakedb_test.go:		// TODO(coopernurse): add type-specific converter
./src/database/sql/fakedb_test.go:		// TODO(coopernurse): add type-specific converter
./src/database/sql/fakedb_test.go:		// TODO(coopernurse): add type-specific converter
./src/database/sql/sql.go:		// TODO(bradfitz): ask driver, if supported, for its default preference
./src/database/sql/sql.go:	// TODO: check if db.driver supports an optional
./src/database/sql/sql.go:	// TODO(bradfitz): for now we need to defensively clone all
./src/database/sql/sql.go:	// only valid until the next Scan/Close. But the TODO is that
./src/database/sql/sql_test.go:	// TODO(kardianos): convert this from using a timeout to using an explicit
./src/database/sql/sql_test.go:		// TODO(kardianos): if the context timeouts before the db.QueryContext
./src/database/sql/sql_test.go:		// TODO: this test fails, but it's just because
./src/debug/dwarf/type.go:			// TODO(rsc): Can also be TagEnumerationType
./src/debug/dwarf/type.go:				// TODO: Should have original compilation
./src/debug/elf/file.go:// TODO: error reporting detail
./src/debug/elf/symbols_test.go:// TODO: remove duplicate code
./src/debug/gosym/pclntab_test.go:		off := pc - text.Addr // TODO(rsc): should not need off; bug in 8g
./src/debug/gosym/pclntab_test.go:	off := uint64(0) // TODO(rsc): should not need off; bug in 8g
./src/debug/gosym/symtab.go:	// TODO(austin) Maybe make a map
./src/debug/pe/file.go:// TODO(brainman): add Load function, as a replacement for NewFile, that does not call removeAuxSymbols (for performance)
./src/debug/pe/file.go:// TODO(brainman): document ImportDirectory once we decide what to do with it.
./src/debug/pe/file.go:	// TODO(brainman): this needs to be rewritten
./src/debug/pe/file.go:					// TODO add dynimport ordinal support.
./src/debug/pe/file.go:					// TODO add dynimport ordinal support.
./src/debug/pe/file.go:	// TODO
./src/debug/pe/section.go:// TODO(brainman): copy all IMAGE_REL_* consts from ldpe.go here
./src/debug/pe/string.go:// TODO(brainman): decide if start parameter should be int instead of uint32
./src/encoding/asn1/asn1.go:	// TODO(dfc) Add support for the remaining integer types
./src/encoding/gob/debug.go:// TODO: handle errors better.
./src/encoding/gob/debug.go:	deb.r.Read(b) // TODO: CHECK THESE READS!!
./src/encoding/gob/decgen.go:// TODO: We could do more by being unsafe. Add a -unsafe flag?
./src/encoding/gob/decgen.go:		/*TODO if math.MaxUint32 < x {
./src/encoding/gob/decgen.go:		// It is kind %[1]s but not type %[1]s. TODO: We can handle this unsafely.
./src/encoding/gob/decode.go:		// TODO(r): anonymous names
./src/encoding/gob/decoder.go:// TODO: make this adjustable?
./src/encoding/gob/dec_helpers.go:		// It is kind bool but not type bool. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind complex64 but not type complex64. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind complex128 but not type complex128. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind float32 but not type float32. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind float64 but not type float64. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind int but not type int. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind int16 but not type int16. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind int32 but not type int32. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind int64 but not type int64. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind int8 but not type int8. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind string but not type string. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind uint but not type uint. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		/*TODO if math.MaxUint32 < x {
./src/encoding/gob/dec_helpers.go:		// It is kind uint16 but not type uint16. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind uint32 but not type uint32. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind uint64 but not type uint64. TODO: We can handle this unsafely.
./src/encoding/gob/dec_helpers.go:		// It is kind uintptr but not type uintptr. TODO: We can handle this unsafely.
./src/encoding/gob/encgen.go:// TODO: We could do more by being unsafe. Add a -unsafe flag?
./src/encoding/gob/encgen.go:		// It is kind %[1]s but not type %[1]s. TODO: We can handle this unsafely.
./src/encoding/gob/encode.go:			// TODO: Is field guaranteed valid? If so we could avoid this check.
./src/encoding/gob/encode.go:			// TODO: Is elem guaranteed valid? If so we could avoid this check.
./src/encoding/gob/encode.go:	// TODO: should we catch panics from the called method?
./src/encoding/gob/enc_helpers.go:		// It is kind bool but not type bool. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind complex64 but not type complex64. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind complex128 but not type complex128. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind float32 but not type float32. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind float64 but not type float64. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind int but not type int. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind int16 but not type int16. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind int32 but not type int32. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind int64 but not type int64. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind int8 but not type int8. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind string but not type string. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind uint but not type uint. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind uint16 but not type uint16. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind uint32 but not type uint32. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind uint64 but not type uint64. TODO: We can handle this unsafely.
./src/encoding/gob/enc_helpers.go:		// It is kind uintptr but not type uintptr. TODO: We can handle this unsafely.
./src/encoding/gob/timing_test.go:		// TODO(#19025): Move per-thread allocation before ResetTimer.
./src/encoding/json/bench_test.go:	// TODO(bcmills): Is there a missing b.SetBytes here?
./src/encoding/json/stream_test.go:	// TODO(rsc): Should not need the * in *RawMessage
./src/encoding/json/stream_test.go:	// TODO(rsc): Should not need the * in *RawMessage
./src/encoding/pem/pem.go:		// TODO(agl): need to cope with values that spread across lines.
./src/encoding/xml/marshal_test.go:			// TODO(rogpeppe): re-enable this test in
./src/encoding/xml/read.go:		// TODO: For now, simply ignore the field. In the near
./src/encoding/xml/xml.go:// TODO(rsc):
./src/encoding/xml/xml.go:	// TODO: this parsing is somewhat lame and not exact.
./src/fmt/fmt_test.go:	{"%.-3d", SE{42}, "%!-(int=42)3d"},             // TODO: Should this set return better error messages?
./src/fmt/fmt_test.go:	{2, `Sprintf("%g")`, func() { Sprintf("%g", float32(3.14159)) }}, // TODO: Can this be 1?
./src/fmt/scan.go:	// TODO: accept N and Ni independently?
./src/go/ast/commentmap.go:	// TODO(gri): Does it make sense to check for sorted-ness
./src/go/ast/commentmap.go:			// TODO(gri) try to simplify the logic below
./src/go/ast/commentmap_test.go:// TODO(gri): add tests for Filter.
./src/go/ast/filter.go:					// TODO(gri): Expand this filtering to other
./src/go/ast/filter.go:					// TODO: consider handling cases where:
./src/go/ast/filter.go:	// TODO(gri) need to compute unresolved identifiers!
./src/go/ast/resolve.go:			// TODO(gri) If a local package name != "." is provided,
./src/go/ast/walk.go:// TODO(gri): Investigate if providing a closure to Walk leads to
./src/go/constant/value_test.go:// TODO(gri) expand this test framework
./src/go/constant/value_test.go:	`0 % 0 = "runtime_error:_integer_divide_by_zero"`, // TODO(gri) should be the same as for /
./src/go/doc/filter.go:// TODO(gri): Recognize "Type.Method" as a name.
./src/go/doc/reader.go:		// TODO(gri): There may be exported methods of non-exported types
./src/go/doc/reader.go:		// showing the TODO body.
./src/go/doc/reader.go:			// TODO(gri) fix this
./src/go/doc/testdata/a.0.golden:TODOS
./src/go/doc/testdata/a.0.golden:TODO(uid)	todo0
./src/go/doc/testdata/a.0.golden:TODO(uid)	todo1
./src/go/doc/testdata/a.1.golden:TODOS
./src/go/doc/testdata/a.1.golden:TODO(uid)	todo0
./src/go/doc/testdata/a.1.golden:TODO(uid)	todo1
./src/go/doc/testdata/a.2.golden:TODOS
./src/go/doc/testdata/a.2.golden:TODO(uid)	todo0
./src/go/doc/testdata/a.2.golden:TODO(uid)	todo1
./src/go/doc/testdata/a0.go://TODO(uid): todo0
./src/go/doc/testdata/a1.go://TODO(uid): todo1
./src/go/doc/testdata/a1.go://TODO(): ignored
./src/go/format/format.go:		// TODO(gri) Do this more efficiently.
./src/go/format/format.go:		// TODO(gri) consider doing this always.
./src/go/format/format.go:			// TODO(gri) Should check if they are sorted already.
./src/go/format/internal.go:// TODO(gri): This file and the file src/cmd/gofmt/internal.go are
./src/go/internal/gccgoimporter/importer.go:		// TODO(pcc): Read the archive directly instead of using "ar".
./src/go/internal/gccgoimporter/importer.go:		// TODO(gri): Use srcDir.
./src/go/internal/gcimporter/bimport.go:		// TODO(gri) Remove this support eventually; after Go1.8.
./src/go/internal/gcimporter/bimport.go:	// TODO(gri) re-investigate if we still need to do this in a delayed fashion
./src/go/internal/gcimporter/bimport.go:		// TODO(gri) review/update this comment once the gc compiler handles type aliases.
./src/go/internal/gcimporter/bimport.go:		// TODO(gri) verify type alias hookup is correct
./src/go/internal/gcimporter/bimport.go:		// TODO(adonovan): opt: save ~512KB using a more complex scheme?
./src/go/internal/gcimporter/bimport.go:			// TODO(gri) replace this with something closer to fieldName
./src/go/internal/gcimporter/bimport.go:			recv, _ := p.paramList() // TODO(gri) do we need a full param list for the receiver?
./src/go/internal/gcimporter/bimport.go:		// TODO(gri) Is this still true now that we have type aliases?
./src/go/internal/gcimporter/bimport.go:	// TODO(gri) go/constant should have a more direct conversion function
./src/go/internal/gcimporter/gcimporter.go:			// TODO(gri): allow clients of go/importer to provide a FileSet.
./src/go/internal/gcimporter/gcimporter_test.go:		// TODO(gri) update the want list to be precise, now that
./src/go/internal/srcimporter/srcimporter.go:		// TODO(gri) Eventually we may want to leave a (possibly empty)
./src/go/internal/srcimporter/srcimporter.go:	// TODO(gri) This should be using p.ctxt.AbsPath which doesn't
./src/go/printer/nodes.go:// TODO(gri): linebreak may add too many lines if the next statement at "line"
./src/go/printer/nodes.go:// TODO(gri) Consider rewriting this to be independent of []ast.Expr
./src/go/printer/nodes.go:		// TODO(gri) for a better result, should probably incorporate both
./src/go/printer/nodes.go:				// TODO(gri) Remove this code if it cannot be reached.
./src/go/printer/nodes.go:			// TODO(gri) consider making this more general and incorporate precedence levels
./src/go/printer/nodes.go:		// TODO(gri): should treat[] like parentheses and undo one level of depth
./src/go/printer/nodes.go:		// TODO(gri): should treat[] like parentheses and undo one level of depth
./src/go/printer/nodes.go:		// linebreak logic improves - there's already a TODO).
./src/go/printer/printer.go:		// TODO(gri) This has become overly complicated. We should be able
./src/go/printer/printer_test.go:			// TODO(gri) check that golden is idempotent
./src/go/printer/testdata/comments.golden:	// TODO(gri) the last comment in this example should be aligned */
./src/go/printer/testdata/comments.golden:// TODO: gofmt doesn't add these tabs; make it so that these golden
./src/go/printer/testdata/comments.input:	// TODO(gri) the last comment in this example should be aligned */
./src/go/printer/testdata/comments.input:// TODO: gofmt doesn't add these tabs; make it so that these golden
./src/go/printer/testdata/linebreaks.golden:		// TODO(gri): the 2nd string of this string list should not be indented
./src/go/printer/testdata/linebreaks.golden:	_ = "xerror.test"	//TODO-
./src/go/printer/testdata/linebreaks.golden:`) //TODO-
./src/go/printer/testdata/linebreaks.input:		// TODO(gri): the 2nd string of this string list should not be indented
./src/go/printer/testdata/linebreaks.input:	_ = "xerror.test" //TODO-
./src/go/printer/testdata/linebreaks.input:`) //TODO-
./src/go/printer/testdata/parser.go:	// TODO(gri): store struct scope in AST
./src/go/printer/testdata/parser.go:	// TODO(gri): store interface scope in AST
./src/go/printer/testdata/parser.go:// TODO(gri): parseExpr may return a type or even a raw type ([..]int) -
./src/go/printer/testdata/parser.go:	// TODO(gri): do all the checks!
./src/go/printer/testdata/parser.go:		// TODO determine a better range for BadExpr below
./src/go/printer/testdata/parser.go:	// TODO(gri): store p.imports in AST
./src/go/scanner/errors.go:		// TODO(gri) reconsider the semantics of Position.IsValid
./src/go/token/position.go:	// TODO(gri): Remove this when compilers have caught up.
./src/go/types/api.go:// TODO(gri) Consider eliminating the IsVoid predicate. Instead, report
./src/go/types/api_test.go:		"new(A).h": {"method (*main.A) h()", "->[1 1]"}, // TODO(gri) should this report .[1 1] ?
./src/go/types/api_test.go:		"new(C).h": {"method (*main.C) h()", "->[1]"}, // TODO(gri) should this report .[1] ?
./src/go/types/api_test.go:		{"var a *T; type T struct{}; func (*T) f() {}", true, []int{0}, true}, // TODO(gri) should this report indirect = false?
./src/go/types/builtins.go:					// TODO(gri) "use" all arguments?
./src/go/types/builtins.go:			// TODO(gri) Using derefStructPtr may result in methods being found
./src/go/types/builtins.go:		// TODO(gri) Should we pass x.typ instead of base (and indirect report if derefStructPtr indirected)?
./src/go/types/call.go:			// TODO(gri) should provide actual type where the conflict happens
./src/go/types/call.go:			// TODO(gri) If we needed to take into account the receiver's
./src/go/types/call.go:				// TODO(gri) Method set computation should probably always compute
./src/go/types/call.go:				// TODO(gri) Consider also using a method set cache for the lifetime
./src/go/types/check_test.go:// TODO(gri) Also collect strict mode errors of the form /* STRICT ... */
./src/go/types/conversions.go:		//   (See also the TODO below.)
./src/go/types/conversions.go:// TODO(gri) convertibleTo checks if T(x) is valid. It assumes that the type
./src/go/types/conversions.go:	// TODO(gri): Is this (typ.Underlying() instead of just typ) correct?
./src/go/types/decl.go:		// TODO(gri) If we have no init expr, we should distribute
./src/go/types/decl.go:	// TODO(gri) It's easy to create pathological cases where the
./src/go/types/expr.go:	// TODO(gri) Sloppy code - clean up. This function is central
./src/go/types/expr.go:	// TODO(gri) this code can be simplified
./src/go/types/expr.go:			// TODO(gri) provide better error messages depending on context
./src/go/types/lookup.go:// TODO(gri) The named type consolidation and seen maps below must be
./src/go/types/lookup.go:						// TODO(gri) optimization: ignore types that can't
./src/go/types/lookup.go:				// TODO(gri) t.allMethods is sorted - use binary search
./src/go/types/lookup.go:	// TODO(gri) Consider using method sets here. Might be more efficient.
./src/go/types/lookup.go:		// TODO(gri) allMethods is sorted - can do this more efficiently
./src/go/types/methodset.go:						// TODO(gri) optimization: ignore types that can't
./src/go/types/methodset.go:			// TODO(gri) A found method may not be added because it's not in the method set
./src/go/types/operand.go:// TODO(gri) The functions operand.assignableTo, checker.convertUntyped,
./src/go/types/operand.go:	// TODO(gri) This is borrowing from checker.convertUntyped and
./src/go/types/resolver.go:			// TODO(gri) avoid declared but not used error here
./src/go/types/resolver.go:			// TODO(gri) avoid declared but not used error here
./src/go/types/resolver.go:									// TODO(gri) When we import a package, we create
./src/go/types/resolver.go:					// TODO(gri) dot-imported objects don't have a position; reportAltDecl won't print anything
./src/go/types/resolver_test.go:	// TODO(gri) add tests to check ImplicitObj callbacks
./src/go/types/return.go:// TODO(gri) For nested breakable statements, the current implementation of hasBreak
./src/go/types/scope.go:// TODO(gri) Provide scopes with a name or other mechanism so that
./src/go/types/selection.go:		// TODO(gri) Similar code is already in call.go - factor!
./src/go/types/selection.go:		// TODO(gri) Compute this eagerly to avoid allocations.
./src/go/types/self_test.go:		// TODO(gri) fix this
./src/go/types/stdlib_test.go:	// TODO(gri) Remove once tests consider +build tags (issue 10370).
./src/go/types/stmt.go:		// TODO(gri) better factoring of error handling (invalid ASTs)
./src/go/types/testdata/builtins.src:	_ = append(ff /* ERROR not a slice */ ()) // TODO(gri) better error message
./src/go/types/testdata/const0.src:	b /* ERROR "initialization cycle" */ , c /* ERROR "initialization cycle" */, d, e = e, d, c, b // TODO(gri) should only have one cycle error
./src/go/types/testdata/const1.src:// TODO(gri) find smaller deltas below
./src/go/types/testdata/constdecl.src:// TODO(gri) move extra tests from testdata/const0.src into here
./src/go/types/testdata/conversions.src:	// TODO(gri) add more tests, improve error message
./src/go/types/testdata/cycles2.src:// TODO(gri) Consider marking methods as incomplete and provide
./src/go/types/testdata/expr3.src:	// f1(g2()) // TODO(gri) missing position in error message
./src/go/types/testdata/importdecl0b.src:	// TODO(gri) At the moment, 2 errors are reported because both go/parser
./src/go/types/testdata/shifts.src:	_ = append(b, 1.0<<s) // should fail - see TODO in append code
./src/go/types/testdata/shifts.src:	// TODO(gri) The delete below is not type-checked correctly yet.
./src/go/types/testdata/shifts.src:	// TODO(gri) the error messages for these two are incorrect - disabled for now
./src/go/types/testdata/vardecl.src:// TODO(gri) consolidate other var decl checks in this file
./src/go/types/type.go:	allMethods []*Func // ordered list of methods declared with or embedded in this interface (TODO(gri): replace with mset)
./src/go/types/typestring.go:// TODO(gri) remove this
./src/go/types/typestring.go:			// TODO(gri): function-local named types should be displayed
./src/go/types/typexpr.go:					// TODO(gri) This is not correct if the underlying type is unknown yet.
./src/go/types/typexpr.go:		// TODO(gri) we may be able to switch to source order
./src/go/types/typexpr.go:			// TODO(gri) Consider marking methods signatures
./src/go/types/typexpr.go:	// TODO(gri) we may be able to switch to source order
./src/html/entity.go:	// TODO(nigeltao): Handle replacements that are wider than their names.
./src/html/template/escape.go:		Args:     []parse.Node{parse.NewIdentifier(identifier).SetTree(nil).SetPos(pos)}, // TODO: SetTree.
./src/html/template/html.go:		// TODO: Split attr and element name part filters so we can whitelist
./src/html/template/js.go:			// TODO: normalize quotes.
./src/html/template/js.go:	// TODO: detect cycles before calling Marshal which loops infinitely on
./src/html/template/js.go:	// TODO: maybe post-process output to prevent it from containing
./src/html/template/js.go:	// TODO: Maybe abbreviate \u00ab to \xab to produce more compact output.
./src/image/draw/draw.go:	// TODO(nigeltao): handle the case where the dst and src overlap.
./src/image/draw/draw.go:				// TODO(nigeltao): consider smarter algorithms.
./src/image/gif/writer.go:		// TODO: Pick a better sub-sample of the Plan 9 palette.
./src/image/jpeg/reader.go:// TODO(nigeltao): fix up the doc comment style so that sentences start with
./src/image/jpeg/writer.go:	// TODO(wathiede): switch on m.ColorModel() instead of type.
./src/image/jpeg/writer.go:	// TODO(wathiede): switch on m.ColorModel() instead of type.
./src/internal/bytealg/equal_arm.s:// TODO: share code with memequal?
./src/internal/bytealg/indexbyte_amd64.s:	// TODO: remove this hack when midstack inlining is enabled?
./src/internal/bytealg/index_s390x.go:	// TODO: it would really be nicer for internal/cpu to figure out this
./src/internal/poll/fd_unix.go:		// TODO(bradfitz): make it wait for readability? (Issue 15735)
./src/internal/poll/fd_unix.go:			// TODO(dfc) should n and oobn be set to 0
./src/internal/poll/fd_windows.go:			// TODO(brainman): maybe do something else, but panic.
./src/internal/poll/writev.go:	// TODO: read from sysconf(_SC_IOV_MAX)? The Linux default is
./src/internal/syscall/windows/registry/registry_test.go:			// TODO: not implemented
./src/internal/syscall/windows/registry/zsyscall_windows.go:	// TODO: add more here, after collecting data on the common
./src/internal/syscall/windows/zsyscall_windows.go:	// TODO: add more here, after collecting data on the common
./src/internal/trace/parser.go:	// TODO(dvyukov): restore stacks for EvGoStart events.
./src/internal/trace/parser.go:	// TODO(dvyukov): test that all EvGoStart events has non-nil Link.
./src/iostest.bash:		# TODO(crawshaw): replace with a test app using go_darwin_arm_exec.
./src/math/big/arith.go:// TODO(gri) Remove use of addWW_g here and then we can remove addWW_g and subWW_g.
./src/math/big/arith_arm64.s:// TODO: Consider re-implementing using Advanced SIMD
./src/math/big/arith_test.go:// TODO(gri) mulAddVWW and divWVW are symmetric operations but
./src/math/big/arith_test.go:	// TODO(agl): These will only work on 64-bit platforms.
./src/math/big/decimal.go:// TODO(gri) Since we know the desired decimal precision when converting
./src/math/big/decimal.go:// TODO(gri) Along the same lines, enforce some limit to shift magnitudes
./src/math/big/float.go:	// TODO(gri) can be more efficient if z.prec > 0
./src/math/big/float.go:	// TODO(gri) having a combined add-and-shift primitive
./src/math/big/float.go:	// TODO(gri) Optimize this for the common case.
./src/math/big/float.go:	// TODO(gri): If we have too many digits (d < 0), we should be able
./src/math/big/floatconv.go:	p := new(Float).SetPrec(z.Prec() + 64) // use more bits for p -- TODO(gri) what is the right number?
./src/math/big/floatconv.go:	// TODO(gri) what is the right number?
./src/math/big/floatconv_test.go:		// TODO(gri) need tests for actual large Floats
./src/math/big/floatmarsh.go:	// TODO(gri): get rid of the []byte/string conversion
./src/math/big/float_test.go:	// TODO(gri) test how precision is set for zero value results
./src/math/big/float_test.go:	// TODO(gri) test basic rounding behavior
./src/math/big/float_test.go:		// TODO(gri) expand
./src/math/big/float_test.go:	// TODO(gri) add more test cases
./src/math/big/float_test.go:	// TODO(gri) make the test vary these precisions
./src/math/big/float_test.go:// TODO(gri) Add tests that check correctness in the presence of aliasing.
./src/math/big/ftoa.go:	cap := 10 // TODO(gri) determine a good/better value here
./src/math/big/ftoa.go:	// TODO(gri) strconv/ftoa.do describes a shortcut in some cases.
./src/math/big/intmarsh_test.go:// TODO: top-level nils.
./src/math/big/int_test.go:	// TODO(gri) add larger products
./src/math/big/nat.go:	// TODO(gri) should find a better solution - this if statement
./src/math/big/nat.go:	u.clear() // TODO(gri) no need to clear if we allocated a new u
./src/math/big/nat.go:	// TODO(agl): we don't actually need to store the q value.
./src/math/big/natconv.go:// TODO(gri) replace this with a table, generated at build time.
./src/math/big/rat.go:	// TODO(adonovan): specialize common degenerate cases: 1.0, integers.
./src/math/big/rat.go:	// TODO(adonovan): specialize common degenerate cases: 1.0, integers.
./src/math/big/ratconv_test.go:	{"-010/1", "-8", true}, // TODO(gri) should we even permit octal here?
./src/math/big/ratconv_test.go:	// TODO(gri) add more tests
./src/math/big/ratmarsh.go:	// TODO(gri): get rid of the []byte/string conversion
./src/math/big/ratmarsh_test.go:// TODO: top-level nils.
./src/math/exp.go:	// TODO(rsc): make sure Ldexp can handle boundary k
./src/math/rand/rand_test.go:		// TODO: detect what it actually has.
./src/math/rand/rand_test.go:					expected.maxError = 0.08 // TODO: What is the right value here? See issue 21211.
./src/mime/mediatype.go:	// TODO: ignoring lang in sv[1] for now. If anybody needs it we'll
./src/mime/mediatype.go:		// TODO: unsupported encoding
./src/mime/multipart/formdata.go:// TODO(adg,bradfitz): find a way to unify the DoS-prevention strategy here
./src/mime/multipart/multipart_test.go:	// TODO: The original mail ended with a double-newline before the
./src/net/addrselect.go:	// TODO(bradfitz): implement? low priority for now.
./src/net/addrselect.go:	// TODO(bradfitz): implement? low priority for now.
./src/net/addrselect.go:	// TODO(bradfitz): implement? low priority for now.
./src/net/dnsclient_unix.go:// TODO(rsc):
./src/net/dnsclient_unix.go:	// TODO: indicate this in a more obvious way, such as a field on DNSError?
./src/net/fd_unix.go:			// TODO: only do this on 10.6 if we can detect 10.6
./src/net/fd_windows.go:	// TODO: Implement this
./src/net/file_windows.go:	// TODO: Implement this
./src/net/file_windows.go:	// TODO: Implement this
./src/net/file_windows.go:	// TODO: Implement this
./src/net/hosts.go:		// TODO(jbd,bradfitz): avoid this alloc if host is already all lowercase?
./src/net/http/cgi/child.go:	// TODO: cookies.  parsing them isn't exported, though.
./src/net/http/cgi/host.go:	// TODO: RFC 3875 isn't clear if only GET is supported, but it
./src/net/http/cgi/host.go:	// TODO: other transformations in spec or practice?
./src/net/http/cgi/host_test.go:		// TODO: make the child process be Go, not Perl.
./src/net/http/clientserver_test.go:		// TODO: also emit this log message for HTTP/2?
./src/net/http/client_test.go:	// TODO(bradfitz): add tests for skipping hostname checks too?
./src/net/http/client_test.go:				// TODO: Check that the body is valid when we do 307 and 308 support
./src/net/http/cookiejar/jar.go:	// TODO: specify which of the caller and callee is responsible for IP
./src/net/http/cookiejar/jar.go:		// TODO: This might be relaxed as in common browsers.
./src/net/http/cookiejar/jar_test.go:	// TODO: Fix canonicalHost so that all of the following malformed
./src/net/http/cookie_test.go:	// TODO(bradfitz): users have reported seeing this in the
./src/net/http/fcgi/child.go:			// TODO(eds): This blocks until the handler reads from the pipe.
./src/net/http/fcgi/child.go:	// TODO(bradfitz): also bound this copy in time. Or send
./src/net/http/h2_bundle.go:// TODO: use singleflight for dialing and addConnCalls?
./src/net/http/h2_bundle.go:	mu sync.Mutex // TODO: maybe switch to RWMutex
./src/net/http/h2_bundle.go:	// TODO: add support for sharing conns based on cert names
./src/net/http/h2_bundle.go:	// TODO: don't close a cc if it was just added to the pool
./src/net/http/h2_bundle.go:// TODO: Benchmark to determine if the pools are necessary. The GC may have
./src/net/http/h2_bundle.go:	// TODO: let getReadBuf be configurable, and use a less memory-pinning
./src/net/http/h2_bundle.go:	maxWriteSize uint32 // zero means unlimited; TODO: implement
./src/net/http/h2_bundle.go:	// TODO: track which type of frame & with which flags was sent
./src/net/http/h2_bundle.go:// TODO: pick a less arbitrary value? this is a bit under
./src/net/http/h2_bundle.go:	http2defaultMaxStreams     = 250 // TODO: make this 100 as the GFE seems to?
./src/net/http/h2_bundle.go:	// TODO: implement
./src/net/http/h2_bundle.go:			// TODO: optionally enforce? Or enforce at the time we receive
./src/net/http/h2_bundle.go:// TODO: remove this helper function once http2 can use build
./src/net/http/h2_bundle.go:	// TODO: remove this string search and be more like the Windows
./src/net/http/h2_bundle.go:	// TODO(bradfitz): x/tools/cmd/bundle doesn't really support
./src/net/http/h2_bundle.go:	timer := time.NewTimer(http2prefaceTimeout) // TODO: configurable on *Server?
./src/net/http/h2_bundle.go:			// reading data (see possible TODO at top of
./src/net/http/h2_bundle.go:// TODO: configurable?
./src/net/http/h2_bundle.go:			// TODO: could we also get into this state if
./src/net/http/h2_bundle.go:			// TODO: add CloseWrite to crypto/tls.Conn first
./src/net/http/h2_bundle.go:				// TODO: send more details to the peer somehow. But http2 has
./src/net/http/h2_bundle.go:	// TODO: adjust buffer writing sizes based on server config, frame size updates from peer, etc
./src/net/http/h2_bundle.go:			// TODO(bradfitz): be faster here, like net/http? measure.
./src/net/http/h2_bundle.go:		// TODO: send a RST_STREAM
./src/net/http/h2_bundle.go:	// TODO: adjust this writer size to account for frame size +
./src/net/http/h2_bundle.go:	// TODO: SetMaxDynamicTableSize, SetMaxDynamicTableSizeLimit on
./src/net/http/h2_bundle.go:	// TODO: do clients send GOAWAY too? maybe? Just Close:
./src/net/http/h2_bundle.go:	// TODO(bradfitz): this is a copy of the logic in net/http. Unify somewhere?
./src/net/http/h2_bundle.go:	// TODO(bradfitz): this Flush could potentially block (as
./src/net/http/h2_bundle.go:		// TODO: write h12Compare test showing whether
./src/net/http/h2_bundle.go:				// TODO(bradfitz): this flush is for latency, not bandwidth.
./src/net/http/h2_bundle.go:	// TODO: also do this if we've written the headers but not
./src/net/http/h2_bundle.go:			// TODO(bradfitz): move first response byte earlier,
./src/net/http/h2_bundle.go:				// TODO: care? unlike http/1, it won't mess up our framing, so it's
./src/net/http/h2_bundle.go:			// TODO: care? unlike http/1, it won't mess up our framing, so it's
./src/net/http/h2_bundle.go:		// TODO: ConnectionError might be overly harsh? Check.
./src/net/http/h2_bundle.go:		// TODO: be stricter here? only silently ignore things which
./src/net/http/h2_bundle.go:	// TODO: check that any declared content-length matches, like
./src/net/http/h2_bundle.go:		// TODO: deal with GOAWAY more. particularly the error code
./src/net/http/h2_bundle.go:			// TODO(bradfitz): handle more settings? SETTINGS_HEADER_TABLE_SIZE probably.
./src/net/http/h2_bundle.go:		// TODO: return error if server tries to RST_STEAM an idle stream
./src/net/http/h2_bundle.go:	// TODO: map err to more interesting error codes, once the
./src/net/http/h2_bundle.go:// TODO: decide whether to a) use this in the client code (which didn't
./src/net/http/h2_bundle.go:	// TODO: this is a common one. It'd be nice to return true
./src/net/http/h2_bundle.go:	// TODO: see writeResHeaders.staysWithinBuffer
./src/net/http/h2_bundle.go:				// TODO: return an error? golang.org/issue/14048
./src/net/http/h2_bundle.go:			// TODO: more of "8.1.2.2 Connection-Specific Header Fields"
./src/net/http/h2_bundle.go:	// TODO: less copy-happy queue.
./src/net/http/http.go:// TODO(bradfitz): move common stuff here. The other files have accumulated
./src/net/http/httptest/recorder.go:			// TODO: use http2.ValidTrailerHeader, but we can't
./src/net/http/httptest/recorder.go:				// TODO: inconsistent with RFC 7230, section 4.1.2.
./src/net/http/httputil/dump.go:	// TODO: if the req.ContentLength is large, we allocate memory
./src/net/http/internal/chunked.go:	// TODO: care about exact syntax of chunk extensions? We're
./src/net/http/proxy_test.go:// TODO(mattn):
./src/net/http/request.go:	// TODO(bradfitz): escape at least newlines in ruri?
./src/net/http/request.go:	// TODO: Consider removing this check after verifying performance is okay.
./src/net/http/request.go:		// TODO(bradfitz): there are too many possible
./src/net/http/response_test.go:				"Connection": {"close"}, // TODO(rsc): Delete?
./src/net/http/response_test.go:				"Connection": {"close"}, // TODO(rsc): Delete?
./src/net/http/server.go:	// TODO(bradfitz): this is currently (for Go 1.8) always
./src/net/http/server.go:		// TODO: inconsistent with RFC 7230, section 4.1.2
./src/net/http/server.go:// TODO: consider changing this behavior and making context
./src/net/http/server.go:	// TODO(bradfitz): where does RFC 2616 say that? See Issue 15527
./src/net/http/server.go:		// TODO: return an error if WriteHeader gets a return parameter
./src/net/http/server.go:// TODO(bradfitz): short-circuit some of the buffering when the
./src/net/http/server.go:	// TODO(bradfitz): let ServeHTTP handlers handle
./src/net/http/serve_test.go:	// TODO: maybe skip this search if no trailers were declared
./src/net/http/serve_test.go:	// TODO: maybe skip this search if no trailers were declared
./src/net/http/serve_test.go:// testing this tangentially and temporarily until another TODO was
./src/net/http/socks_bundle.go:		// TODO(mikio): handle IO deadlines and cancelation if
./src/net/http/transfer.go:			// TODO: could do better allocation-wise here, but trailers are rare,
./src/net/http/transfer.go:	// TODO: Even though we only support "identity" and "chunked"
./src/net/http/transport.go:	// TODO: tunable on max per-host TCP dials in flight (Issue 13957)
./src/net/http/transport.go:	// TODO: also add this to x/net/http2.Configure Transport, behind
./src/net/http/transport.go:var errRequestCanceledConn = errors.New("net/http: request canceled while waiting for connection") // TODO: unify?
./src/net/http/transport_test.go:// TODO: test 5 pipelined requests with responses: 1) OK, 2) OK, Connection: Close
./src/net/http/transport_test.go:	// not what we want to test. TODO(bradfitz): use an io.Pipe
./src/net/interface_bsdvar.go:	// TODO(mikio): Implement this like other platforms.
./src/net/iprawsock_posix.go:	// TODO(cw,rsc): consider using readv if we know the family
./src/net/lookup.go:	// TODO(bradfitz): optional interface impl override hook
./src/net/lookup.go:	// TODO(bradfitz): Timeout time.Duration?
./src/net/lookup_windows.go:	// TODO(bradfitz,brainman): use ctx more. See TODO below.
./src/net/lookup_windows.go:		// TODO(bradfitz,brainman): cancel the ongoing
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/lookup_windows.go:	// TODO(bradfitz): finish ctx plumbing. Nothing currently depends on this.
./src/net/mail/message.go:	// TODO(dsymonds): Is this really correct?
./src/net/mail/message.go:	// TODO(dsymonds): Handle domain-literal
./src/net/mail/message.go:	// TODO(stapelberg): parse quoted-string within comment
./src/net/net.go:// TODO(bradfitz): get rid of this after adjusting tests and making
./src/net/net_test.go:				// TODO: find a better way to wait
./src/net/net_windows_test.go:	// TODO: need to test ipv6 netmask too, but netsh does not outputs it
./src/net/sock_stub.go:	// TODO: Implement this
./src/net/sock_windows.go:	// TODO: Implement this
./src/net/tcpsock_posix.go:	// TODO: try to understand what's really going on.
./src/net/tcpsock_test.go:		// TODO(brainman): do not know why it hangs.
./src/os/exec/exec.go:	// TODO(bradfitz): we could keep one large []byte and use part of it for
./src/os/exec/exec_test.go:		// TODO(cnicolaou): https://golang.org/issue/2603
./src/os/exec/exec_test.go:			// TODO(jsing): Determine why DragonFly is leaking
./src/os/exec/exec_test.go:			// TODO(bradfitz): broken? Sometimes.
./src/os/exec/exec_test.go:			// TODO(jsing): This currently fails on NetBSD due to
./src/os/exec/exec_test.go:			// TODO(aram): This fails on Solaris because libc opens
./src/os/exec/lp_windows_test.go:		fails:     true, // TODO(brainman): do not know why this fails
./src/os/exec_windows.go:	// TODO(rsc): Handle Interrupt too?
./src/os/os_test.go:	// TODO(brainman): file.Chdir() is not implemented on windows.
./src/os/os_test.go:		// TODO: golang.org/issue/8206
./src/os/user/user_test.go:	// TODO: Lookup() has a fast path that calls Current() and returns if the
./src/plugin/plugin_dlopen.go:	// TODO(crawshaw): look for plugin note, confirm it is a Go plugin
./src/reflect/all_test.go:			mustPanic: true, // TODO(sbinet): creating a name with a package path
./src/reflect/all_test.go:			mustPanic: true, // TODO(sbinet): creating a name with a package path
./src/reflect/all_test.go:			mustPanic: true, // TODO(sbinet): creating a name with a package path
./src/reflect/all_test.go:			mustPanic: true, // TODO(sbinet): creating a name with a package path
./src/reflect/set_test.go:		// TODO(rsc): Should be able to define MyBuffer here.
./src/reflect/type.go:	// TODO(mdempsky): Binary search.
./src/reflect/type.go:// TODO(gri): Should there be an error/bool indicator if the index
./src/reflect/type.go:	// TODO: Precedence when constructing string.
./src/reflect/type.go:// TODO(crawshaw): as these structTypeFixedN and funcTypeFixedN structs
./src/reflect/type.go:						// TODO(sbinet).  Issue 15924.
./src/reflect/type.go:							// TODO(sbinet).
./src/reflect/type.go:							// TODO(sbinet)
./src/reflect/type.go:							// TODO(sbinet)
./src/reflect/type.go:	// TODO(sbinet): Once we allow embedding multiple types,
./src/reflect/type.go:	// TODO(sbinet): Once we allow non-exported methods, we will
./src/reflect/value.go:			// TODO: pass safe boolean from valueInterface so
./src/reflect/value.go:	// TODO: pass safe to packEface so we don't need to copy if safe==true?
./src/reflect/value.go:	// TODO: deprecate this
./src/reflect/value.go:	// TODO: deprecate
./src/reflect/value.go:	// TODO: deprecate
./src/reflect/value.go:	// TODO: Maybe allow contents of a Value to live on the stack.
./src/regexp/onepass_test.go:// TODO(cespare): Unify with onePassTests and rationalize one-pass test cases.
./src/regexp/regexp.go:		// TODO(rsc): Remove this allocation by adding
./src/regexp/regexp.go:			// TODO: use step()
./src/regexp/syntax/compile.go:	// TODO: impose length limit
./src/regexp/syntax/compile.go:	// TODO: elide nop
./src/run.bat:rem TODO avoid rebuild if possible
./src/runtime/asm_386.s:	JEQ	2(PC) // TODO
./src/runtime/asm_386.s:	// TODO: Consider passing g.m.p in as an argument so they can be shared
./src/runtime/asm_386.s:	MOVL	(DI), BX	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_amd64.s:	// TODO: Consider passing g.m.p in as an argument so they can be shared
./src/runtime/asm_amd64.s:	// TODO: We could strike a different balance; e.g., saving X0
./src/runtime/asm_amd64p32.s:	// TODO: Consider passing g.m.p in as an argument so they can be shared
./src/runtime/asm_amd64p32.s:	MOVL	(DI), R13	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_amd64p32.s:	// TODO: We could strike a different balance; e.g., saving X0
./src/runtime/asm_arm.s:// TODO(rsc): Push things on stack and then use pop
./src/runtime/asm_arm.s:	MOVW	(R2), R0	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_arm64.s:	MOVD	(R2), R0	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_mips64x.s:	MOVV	R0, 2(R0) // TODO: TD
./src/runtime/asm_mips64x.s:	MOVV	(R20), R1	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_mipsx.s:	MOVW	(R20), R1	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_ppc64x.s:	MOVD	R0, 0(R0) // TODO: TD
./src/runtime/asm_ppc64x.s:	MOVD	R0, 0(R1)	// clear back chain pointer (TODO can we give it real back trace information?)
./src/runtime/asm_ppc64x.s:	MOVD	(R20), R16	// TODO: This turns bad writes into bad reads.
./src/runtime/asm_s390x.s:	MOVD	$0, 0(R15)              // clear back chain pointer (TODO can we give it real back trace information?)
./src/runtime/asm_s390x.s:	MOVD	(R2), R1	// TODO: This turns bad writes into bad reads.
./src/runtime/cgo/asm_arm64.s:	 * TODO(minux): use LDP/STP here if it matters.
./src/runtime/cgo/asm_ppc64x.s:	// TODO(austin): ABI v1 (fn is probably a function descriptor)
./src/runtime/cgo/gcc_android_386.c:	 * TODO: fix this.
./src/runtime/cgo/gcc_android_386.c:	 * TODO(hyangah): check 0xb0 works with API23+
./src/runtime/cgo/gcc_android_386.c:	// TODO: output to stderr is not useful for apps.
./src/runtime/cgo/gcc_android_amd64.c:	 * TODO: fix this.
./src/runtime/cgo/gcc_android_amd64.c:	// TODO: output to stderr is not useful for apps.
./src/runtime/cgo/gcc_libinit.c:	// TODO(iant): For the case of a new C thread calling into Go, such
./src/runtime/cgo/signal_darwin_arm.s:	// TODO: badsignal should not return, but it does. Issue #10139.
./src/runtime/cgo/signal_darwin_arm64.s:	// TODO(crawshaw): call badsignal
./src/runtime/chan.go:	// TODO(dvyukov,rlh): Rethink when collector can move allocated objects.
./src/runtime/chan.go:	// TODO(khr): just return 2 values from this function, now that it is in Go.
./src/runtime/crash_cgo_test.go:		// TODO(austin) External linking not implemented on
./src/runtime/crash_test.go:		// TODO(iant): Have cmd/dist update the environment variable.
./src/runtime/debug/garbage_test.go:	const thresh = 20 << 20 // TODO: Figure out why this is so noisy on some builders
./src/runtime/duff_mips64x.s:// TODO: Implement runtime·duffcopy.
./src/runtime/duff_ppc64x.s:// TODO: Implement runtime·duffcopy.
./src/runtime/hash32.go:// TODO: convince the compiler to issue rotl instructions after inlining.
./src/runtime/hash64.go:// TODO: convince the compiler to issue rotl instructions after inlining.
./src/runtime/heapdump.go:	// TODO(mwhudson): dump datamask etc from all objects
./src/runtime/iface.go:	// TODO: Add the static type we're converting from as well.
./src/runtime/iface.go:	// TODO: We allocate a zeroed object only to overwrite it with actual data.
./src/runtime/internal/atomic/atomic_mipsx.go:// TODO implement lock striping
./src/runtime/internal/atomic/stubs.go:// TODO(matloob): Should these functions have the go:noescape annotation?
./src/runtime/internal/atomic/sys_nonlinux_arm.s:// TODO(minux): this is only valid for ARMv6+
./src/runtime/malloc.go:		// TODO: This would be cleaner if sysReserve could be
./src/runtime/malloc.go:// TODO: Use this as the return type of sysAlloc, persistentAlloc, etc?
./src/runtime/map.go:		// TODO: reuse overflow buckets instead of using new ones, if there
./src/runtime/map_fast32.go:		// TODO: reuse overflow buckets instead of using new ones, if there
./src/runtime/map_fast64.go:		// TODO: reuse overflow buckets instead of using new ones, if there
./src/runtime/map_faststr.go:		// TODO: reuse overflow buckets instead of using new ones, if there
./src/runtime/map_test.go:	// TODO: are we allowed to get the first entry returned again???
./src/runtime/mbarrier.go:// TODO: Perfect for go:nosplitrec since we can't have a safe point
./src/runtime/mbarrier.go:	// TODO(rsc): If typedslicecopy becomes faster than calling
./src/runtime/mbitmap.go:			// TODO(austin): We could be more aggressive
./src/runtime/mbitmap.go:// TODO(rsc): Perhaps introduce a different heapBitsSpan type.
./src/runtime/mbitmap.go:// TODO:(rlh) Use popcount intrinsic.
./src/runtime/mbitmap.go:		// TODO: It doesn't matter if we set the checkmark, so
./src/runtime/mbitmap.go:		// TODO: We could probably make this faster by
./src/runtime/mbitmap.go:					// TODO(rsc): Replace with table lookup or loop on systems without divide?
./src/runtime/memclr_386.s:	// TODO: use branch table and BSR to make this just a single dispatch
./src/runtime/memclr_amd64.s:	// TODO: use branch table and BSR to make this just a single dispatch
./src/runtime/memclr_amd64.s:	// TODO: for really big clears, use MOVNTDQ, even without AVX2.
./src/runtime/memclr_amd64.s:	// TODO take into account actual LLC size. E. g. glibc uses LLC size/2.
./src/runtime/memmove_386.s:	// TODO: use branch table and BSR to make this just a single dispatch
./src/runtime/memmove_amd64.s:	// TODO: use branch table and BSR to make this just a single dispatch
./src/runtime/memmove_test.go:// TODO: 2 byte and 8 byte benchmarks also.
./src/runtime/mgc.go:	// TODO: This is a temporary fallback to work around races
./src/runtime/mgc.go:	// TODO(austin): Should dedicated workers keep an eye on this
./src/runtime/mgc.go:		// TODO(austin): Figure out the race and fix this
./src/runtime/mgc.go://TODO go:nowritebarrier
./src/runtime/mgc.go:		// TODO(austin): Fix the races and and remove
./src/runtime/mgcmark.go:	// TODO(austin): This is a bit ridiculous. Compute and store
./src/runtime/mgcmark.go:			// TODO: scang blocks until gp's stack has
./src/runtime/mgcmark.go://TODO go:nowritebarrier
./src/runtime/mgcmark.go:	// TODO(austin): There are several ideas for making this more
./src/runtime/mgcmark.go:			// TODO: Assists should get credit for this
./src/runtime/mgcsweep.go://TODO go:nowritebarrier
./src/runtime/mgcwork.go:	// TODO: This might be a good place to add prefetch code
./src/runtime/mheap.go:	// TODO(austin): pagesInUse should be a uintptr, but the 386
./src/runtime/mheap.go:	list *mSpanList // For debugging. TODO: Remove.
./src/runtime/mheap.go:	// TODO: Look up nelems from sizeclass and remove this field if it
./src/runtime/mheap.go:		// TODO(austin): This tends to sweep a large number of
./src/runtime/mheap.go:		// TODO: Mark it "already zeroed"
./src/runtime/mkduff.go:	fmt.Fprintln(w, "// TODO: Implement runtime·duffcopy.")
./src/runtime/mkduff.go:	fmt.Fprintln(w, "// TODO: Implement runtime·duffcopy.")
./src/runtime/mprof.go:	// TODO(pjw): measure impact of always calling fastrand vs using something
./src/runtime/mstats.go:	// TODO(austin): heap_released is both useless and inaccurate
./src/runtime/mwbbuf.go:	// TODO: What is the latency cost of this? Tune this value.
./src/runtime/mwbbuf.go:// TODO: A "go:nosplitrec" annotation would be perfect for this.
./src/runtime/mwbbuf.go:	// TODO: Should scanobject/scanblock just stuff pointers into
./src/runtime/mwbbuf.go:	// TODO: We could avoid shading any of the "new" pointers in
./src/runtime/mwbbuf.go:			// TODO: Should we filter out nils in the fast
./src/runtime/mwbbuf.go:		// TODO: Consider making two passes where the first
./src/runtime/os3_plan9.go:	// TODO: Enable profiling interrupts.
./src/runtime/os_darwin.go:	// TODO: Loop on interrupt.
./src/runtime/os_darwin.go:// TODO: does this matter?
./src/runtime/os_darwin_arm.go:var hardDiv bool // TODO: set if a hardware divider is available
./src/runtime/os_darwin_arm.go:	// TODO(minux): FP checks like in os_linux_arm.go.
./src/runtime/os_darwin_arm.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_darwin_arm64.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_dragonfly.go:	// TODO: Check for error.
./src/runtime/os_freebsd.go:	// TODO: Check for error.
./src/runtime/os_freebsd_arm.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_nacl_arm.go:var hardDiv bool // TODO: set if a hardware divider is available
./src/runtime/os_nacl_arm.go:	// TODO(minux): FP checks like in os_linux_arm.go.
./src/runtime/os_nacl_arm.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_netbsd_arm.go:var hardDiv bool // TODO: set if a hardware divider is available
./src/runtime/os_netbsd_arm.go:	// TODO(minux): FP checks like in os_linux_arm.go.
./src/runtime/os_netbsd_arm.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_openbsd_arm.go:var hardDiv bool // TODO: set if a hardware divider is available
./src/runtime/os_openbsd_arm.go:	// TODO(minux): FP checks like in os_linux_arm.go.
./src/runtime/os_openbsd_arm.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_plan9.go:	// TODO(aram): remove hack after I fix _nsec in the pc64 kernel.
./src/runtime/os_plan9_arm.go:var hardDiv bool // TODO: set if a hardware divider is available
./src/runtime/os_plan9_arm.go:	return // TODO(minux)
./src/runtime/os_plan9_arm.go:	// TODO: need more entropy to better seed fastrand.
./src/runtime/os_solaris.go:	// TODO(rsc): Why is noescape necessary here and below?
./src/runtime/os_windows.go:// TODO(brainman): should not need those
./src/runtime/panic.go:// TODO(rsc): Once we commit to CopyStackAlways,
./src/runtime/pprof/internal/profile/profile.go:// TODO(rsilvera): consider normalizing the profiles based on the
./src/runtime/pprof/label.go:	// TODO(matloob): replace the map implementation with something
./src/runtime/pprof/pprof.go:	// TODO(pjw): too much common code with writeBlock. FIX!
./src/runtime/pprof/proto.go:	// TODO: Set any of HasInlineFrames, HasFunctions, HasFilenames, HasLineNumbers?
./src/runtime/pprof/proto.go:	// TODO: Anything for tagProfile_DropFrames?
./src/runtime/pprof/proto.go:	// TODO: Anything for tagProfile_KeepFrames?
./src/runtime/pprof/proto.go:		// TODO: pprof's remapMappingIDs makes two adjustments:
./src/runtime/proc.go:// TODO(rsc): An alternative would be to allocate a dummy pthread per-thread
./src/runtime/proc.go:		// TODO: This may be unnecessary on Windows, which
./src/runtime/proc.go:	if atomic.Load(&sched.nmspinning)+atomic.Load(&sched.npidle) == 0 && atomic.Cas(&sched.nmspinning, 0, 1) { // TODO: fast atomic
./src/runtime/proc.go:	atomic.Xadd(&sched.npidle, 1) // TODO: fast atomic
./src/runtime/proc.go:		atomic.Xadd(&sched.npidle, -1) // TODO: fast atomic
./src/runtime/race/testdata/waitgroup_test.go:// TODO: this is actually a panic-synchronization test, not a
./src/runtime/rt0_android_386.s:// TODO: wire up necessary VDSO (see os_linux_386.go)
./src/runtime/rt0_linux_ppc64.s:	// TODO(austin): Support ABI v1 dynamic linking entry point
./src/runtime/runtime-gdb.py:				#TODO fix quoting for qualified variable names
./src/runtime/runtime-gdb.py:# TODO: print interface's methods and dynamic type's func pointers thereof.
./src/runtime/runtime-gdb_test.go:		"-ex", "down", // back to fmt.Println (goroutine 2 below only works at bottom of stack.  TODO: fix that)
./src/runtime/runtime1.go:	// TODO(austin): ppc64 in dynamic linking mode doesn't
./src/runtime/runtime1.go:// TODO: These should be locals in testAtomic64, but we don't 8-byte
./src/runtime/runtime2.go:	stackLock      uint32 // sigprof/scang lock; TODO: fold in to atomicstatus
./src/runtime/runtime2.go:	gcscanvalid    bool     // false at start of gc cycle, true if G has not run since last scan; TODO: remove?
./src/runtime/runtime2.go:	// TODO: Consider caching this in the running G.
./src/runtime/runtime2.go:	// TODO: deprecate these; use internal/cpu directly.
./src/runtime/select.go:	// TODO(khr): if we have a moving garbage collector, we'll need to
./src/runtime/signal_solaris.go:	/* TODO(aram): what should be do about these signals? _SigDefault or _SigNotify? is this set static? */
./src/runtime/signal_unix.go:	g.sigcode1 = 0 // TODO: emulate si_addr
./src/runtime/signal_windows.go:	// TODO(mwhudson): needs to loop to support shared libs
./src/runtime/signal_windows.go:	// TODO: This routine should do whatever is needed
./src/runtime/slice.go:// TODO: When the old backend is gone, reconsider this decision.
./src/runtime/slice.go:		// TODO: is this still worth it with new memmove impl?
./src/runtime/stack.go:// TODO: one lock per order?
./src/runtime/stack.go:	// TODO: double check all gp. shouldn't be getg().
./src/runtime/syscall_solaris.go:// TODO(aram): Once we remove all instances of C calling sysvicallN, make
./src/runtime/syscall_windows_test.go:	// TODO: test a function which calls back in another thread: QueueUserAPC() or CreateThread()
./src/runtime/sys_freebsd_arm.s:// TODO: this is only valid for ARMv7+
./src/runtime/sys_freebsd_arm.s:// TODO(minux): this only supports ARMv6K+.
./src/runtime/sys_linux_arm.s:	// TODO(kaib): figure out which registers are clobbered by clone and avoid stack copying
./src/runtime/sys_linux_arm64.s:	// TODO: setup TLS.
./src/runtime/sys_linux_mips64x.s:	// TODO: setup TLS.
./src/runtime/sys_linux_mipsx.s:// TODO(mips32): doesn't have runtime·stackcheck(SB)
./src/runtime/sys_linux_ppc64x.s:	// TODO: setup TLS.
./src/runtime/sys_nacl_amd64p32.s:	// TODO: Once we have a NaCl SDK with futex syscall support,
./src/runtime/sys_netbsd_arm.s:// TODO: this is only valid for ARMv7+
./src/runtime/sys_openbsd_arm.s:// TODO(jsing): Implement.
./src/runtime/sys_solaris_amd64.s:	// TODO(aram): do something about the cpu profiler here.
./src/runtime/textflag.h:// TODO(mwhudson): only implemented for ppc64x at present.
./src/runtime/trace/annotation.go:	// TODO(hyangah): reduce the overhead at least when
./src/runtime/trace/annotation.go:	// TODO(hyangah): record parent id?
./src/runtime/trace/annotation.go:	// TODO(hyangah): use per-P cache
./src/runtime/trace.go:	// TODO: central lock to access the map is not ideal.
./src/runtime/trace.go:// TODO: Since traceBuf is now go:notinheap, this isn't necessary.
./src/runtime/trace.go:	// TODO: test on non-zero extraBytes param.
./src/runtime/trace.go:// TODO: Since traceAllocBlock is now go:notinheap, this isn't necessary.
./src/runtime/traceback.go:// TODO: Unify this with gentraceback and CallersFrames.
./src/runtime/vdso_linux.go:		// TODO(rsc): I don't understand why the compiler thinks info escapes
./src/runtime/write_err_android.go:	// TODO(hakim): logging for emulator?
./src/runtime/write_err_android.go:		// TODO(hakim): or should we just close fd and hope for better luck next time?
./src/runtime/write_err_android.go:	// TODO(hakim):  hdr[1:2] = gettid?
./src/strconv/ftoa.go:// TODO: move elsewhere?
./src/strconv/quote.go:// TODO: IsPrint is a local implementation of unicode.IsPrint, verified by the tests
./src/strconv/testdata/testfp.txt:# TODO:
./src/strings/builder.go:		// TODO: once issue 7921 is fixed, this should be reverted to
./src/strings/replace.go:	// TODO(bradfitz): use io.WriteString with slices of s, avoiding allocation.
./src/strings/replace.go:// TODO(tocarip) revisit once we have register-based abi/mid-stack inlining.
./src/strings/strings.go:// TODO: update when package unicode captures more of the properties.
./src/sync/atomic/asm_freebsd_arm.s:// TODO(minux): this only supports ARMv6K or higher.
./src/sync/atomic/asm_linux_arm.s:	CMP	$6, R0 // TODO(minux): how to differentiate ARMv6 with ARMv6K?
./src/sync/atomic/asm_netbsd_arm.s:// TODO(minux): this only supports ARMv6K or higher.
./src/sync/atomic/asm_openbsd_arm.s:// TODO(minux): this only supports ARMv6K or higher.
./src/sync/atomic/asm_plan9_arm.s:// TODO(minux): this only supports ARMv6K or higher.
./src/syscall/fs_nacl.go:// TODO: Perhaps support symlinks, although they muck everything up.
./src/syscall/fs_nacl.go:		// TODO: some kind of special file
./src/syscall/mksyscall_windows.go:	// TODO: get rid of this field and just use parameter index instead
./src/syscall/mksyscall_windows.go:		// TODO: this needs better logic than just using package name
./src/syscall/mksyscall_windows.go:// TODO: use println instead to print in the following template
./src/syscall/mksyscall_windows.go:	// TODO: add more here, after collecting data on the common
./src/syscall/net_nacl.go:// TODO(rsc): Some day, do a better job with port allocation.
./src/syscall/syscall_bsd.go:	// TODO(rsc): Can we use a single global basep for all calls?
./src/syscall/syscall_bsd.go:	// TODO(jsing): DragonFly has a "bug" (see issue 3349), which should be
./src/syscall/syscall_linux_386.go:// TODO(rsc): Rewrite all nn(SP) references into name+(nn-8)(FP)
./src/syscall/syscall_linux_arm64.go:// TODO(dfc): constants that should be in zsysnum_linux_arm64.go, remove
./src/syscall/syscall_netbsd.go:// TODO, see golang.org/issue/5847
./src/syscall/syscall_openbsd.go:// TODO, see golang.org/issue/5847
./src/syscall/syscall_plan9.go:	// TODO(aram): remove hack after I fix _nsec in the pc64 kernel.
./src/syscall/syscall_solaris.go:	// TODO(rsc): Can we use a single global basep for all calls?
./src/syscall/syscall_windows.go:	// TODO(brainman): implement SockaddrUnix.sockaddr()
./src/syscall/syscall_windows.go:// TODO(brainman): fix all needed for net
./src/syscall/syscall_windows.go:// TODO(brainman): fix all needed for os
./src/syscall/tables_nacl.go:// TODO: generate with runtime/mknacl.sh, allow override with IRT.
./src/syscall/tables_nacl.go:// TODO: Auto-generate some day. (Hard-coded in binaries so not likely to change.)
./src/syscall/tables_nacl.go:// TODO: Auto-generate some day. (Hard-coded in binaries so not likely to change.)
./src/syscall/types_windows.go:// TODO(mattn): SockaddrGen is union of sockaddr/sockaddr_in/sockaddr_in6_old.
./src/syscall/zsyscall_windows.go:	// TODO: add more here, after collecting data on the common
./src/syscall/zsysnum_solaris_amd64.go:// TODO(aram): remove these before Go 1.3.
./src/testing/match.go:// TODO: fix test_main to avoid race and improve caching, also allowing to
./src/testing/testing.go:		// TODO: Worth doing better? Probably not, because we're here only
./src/text/template/exec.go:// TODO: It would be nice if ExecError was more broken down, but
./src/text/template/exec.go:		// TODO: This could still be a confusing error; maybe goodFunc should provide info.
./src/text/template/funcs.go:// TODO: Perhaps allow comparison between signed and unsigned integers.
./src/text/template/parse/node.go:// TODO: fix one day?
./src/text/template/parse/node.go:// TODO: fix one day?
./src/text/template/parse/node.go:	// TODO: Not really a problem; could change API without effect but
./src/text/template/parse/node.go:	// TODO: Not really a problem; could change API without effect but
./src/text/template/parse/parse.go:			// TODO: Should we allow else-if in with and range?
./src/time/time.go:	// TODO: Check for overflow.
./src/time/time.go:// TODO(rsc): Remove GobEncoder, GobDecoder, MarshalJSON, UnmarshalJSON in Go 2.
./src/time/zoneinfo_android.go:	// TODO(elias.naur): getprop persist.sys.timezone
./src/time/zoneinfo_ios.go:	// TODO(crawshaw): [NSTimeZone localTimeZone]
./src/time/zoneinfo_windows.go:// TODO(rsc): Fall back to copy of zoneinfo files.
./src/unicode/casetables.go:// TODO: This file contains the special casing rules for Turkish and Azeri only.
./src/vendor/golang_org/x/net/http2/hpack/hpack.go:// TODO: add method *Decoder.Reset(maxSize, emitFunc) to let callers re-use Decoders and their
./src/vendor/golang_org/x/net/http2/hpack/hpack.go:// TODO: remove this method and make it incremental later? This is
./src/vendor/golang_org/x/net/http2/hpack/hpack.go:		if m >= 63 { // TODO: proper overflow check. making this up.
./src/vendor/golang_org/x/net/idna/idna.go:// TODO: the current error handling is, in my opinion, the least opinionated.
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: profiles
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: allow for a quick check of the tables data.
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: consider first doing a quick check to see if any of these checks
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: filter need for normalization in loop below.
./src/vendor/golang_org/x/net/idna/idna.go:		// TODO: handle the NV8 defined in the Unicode idna data set to allow
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: also store bidi info for mapped data. This is possible, but a bit
./src/vendor/golang_org/x/net/idna/idna.go:		// TODO: the punycode converters require strings as input.
./src/vendor/golang_org/x/net/idna/idna.go:		// TODO: handle V2008
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: detect whether string may have to be normalized in the following
./src/vendor/golang_org/x/net/idna/idna.go:	// TODO: merge the use of this in the trie.
./src/vendor/golang_org/x/net/idna/trie.go:		// TODO: support and handle two-byte inline masks
./src/vendor/golang_org/x/net/lex/httplex/httplex.go:	// TODO: consider using strings.Trim(x, " \t") instead,
./src/vendor/golang_org/x/text/secure/bidirule/bidirule.go:					// TODO: is this correct?
./src/vendor/golang_org/x/text/secure/bidirule/bidirule.go:		// TODO: using CompactClass would result in noticeable speedup.
./src/vendor/golang_org/x/text/secure/bidirule/bidirule.go:		// TODO: using CompactClass results in noticeable speedup.
./src/vendor/golang_org/x/text/transform/transform.go:// TODO: implement ReadByte (and ReadRune??).
./src/vendor/golang_org/x/text/transform/transform.go:		// TODO: limit the amount copied on first try.
./src/vendor/golang_org/x/text/transform/transform.go:// TODO: make chain use Span (is going to be fun to implement!)
./src/vendor/golang_org/x/text/transform/transform.go:		// TODO:  let transformers implement an optional Spanner interface, akin
./src/vendor/golang_org/x/text/unicode/bidi/bidi.go:// TODO:
./src/vendor/golang_org/x/text/unicode/bidi/bidi.go:// TODO: perhaps with options.
./src/vendor/golang_org/x/text/unicode/bidi/bidi.go:// TODO: methods for
./src/vendor/golang_org/x/text/unicode/bidi/bracket.go:// TODO: have separate type for "strong" directionality.
./src/vendor/golang_org/x/text/unicode/bidi/bracket.go:// TODO: use separate type for "strong" directionality.
./src/vendor/golang_org/x/text/unicode/bidi/core.go:// TODO: return an error.
./src/vendor/golang_org/x/text/unicode/bidi/core.go:// TODO: change validation to not panic
./src/vendor/golang_org/x/text/unicode/bidi/prop.go:// TODO: using this for bidirule reduces the running time by about 5%. Consider
./src/vendor/golang_org/x/text/unicode/bidi/prop.go:// TODO: find a better API and expose.
./src/vendor/golang_org/x/text/unicode/bidi/prop.go:// TODO: these lookup methods are based on the generated trie code. The returned
./src/vendor/golang_org/x/text/unicode/norm/composition.go:		// TODO: inline.
./src/vendor/golang_org/x/text/unicode/norm/forminfo.go:	// TODO: loosen these conditions.
./src/vendor/golang_org/x/text/unicode/norm/forminfo.go:	// TODO: create the decomposition for Hangul?
./src/vendor/golang_org/x/text/unicode/norm/iter.go:				// TODO: this condition should not be possible, but we leave it
./src/vendor/golang_org/x/text/unicode/norm/normalize.go:		// TODO: Using streamSafe to determine the boundary isn't the same as
./src/vendor/golang_org/x/text/unicode/norm/normalize.go:		// TODO: this could be removed if we don't support merging.
./src/vendor/golang_org/x/text/unicode/norm/transform.go:	// TODO: get rid of reorderBuffer. See CL 23460044.
./test/alias2.go:// TODO(gri) expand
./test/bench/go1/fasta_test.go:		// TODO(dfc) remove this limitation after precise gc.
./test/checkbce.go:		// TODO: 'if 4 <= i && i < len(a)' gets rewritten to 'if uint(i - 4) < 256 - 4',
./test/closedchan.go:// TODO(rsc): Doesn't check behavior of close(c) when there
./test/codegen/comparisons.go:// This was a TODO in mapaccess1_faststr
./test/codegen/mapaccess.go:// TODO: optimization is not applied because of mapslow flag.
./test/codegen/mapaccess.go:// TODO: optimization is not applied because of mapslow flag.
./test/codegen/math.go:	// amd64:"BTRQ\t[$]63","PXOR"    (TODO: this should be BTSQ)
./test/const.go:	// TODO(gri): exp/ssa/interp constant folding is incorrect.
./test/escape2.go:		// TODO: This one really only escapes its scope, but we don't distinguish yet.
./test/escape2n.go:		// TODO: This one really only escapes its scope, but we don't distinguish yet.
./test/fixedbugs/bug248.go:	// TODO: If we get rid of errchk, re-enable this test on Windows.
./test/fixedbugs/bug251.go:	// TODO(mdempsky): The duplicate method error is silly
./test/fixedbugs/bug345.go:	// TODO: If we get rid of errchk, re-enable this test on Plan 9 and Windows.
./test/fixedbugs/bug369.dir/main.go:		// TODO(rsc): doesn't work on linux-amd64 or darwin-amd64 builders, nor on
./test/fixedbugs/issue18392.go:	// TODO(mdempsky): This should be an error, but this error is
./test/fixedbugs/issue20335.go:// TODO: check the generated assembly?
./test/fixedbugs/issue22662.go:// TODO: check columns
./test/fixedbugs/issue23545.go:// TODO: build only on gccgo for now, as it hits issue
./test/recover2.go:// TODO(rsc):
./test/run.go:// TODO(bradfitz): docs of some sort, once we figure out how we're changing
./test/run.go:	// TODO(bradfitz): just use all directories?
./test/run.go:	// TODO: Clean up/simplify this switch statement.
./test/run.go:		// TODO(gri) remove need for -C (disable printing of columns in error messages)
./test/run.go:		// TODO: not supported on NaCl
./test/stress/maps.go:	// TODO(bradfitz): bunch more map types of all different key and value types.
